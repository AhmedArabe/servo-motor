
servo_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000417a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  0000417a  0000420e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800156  00800156  00004304  2**0
                  ALLOC
  3 .stab         000048fc  00000000  00000000  00004304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001eab  00000000  00000000  00008c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000aaab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000abeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ad5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d88f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e79c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ea29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f1f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_1>
       8:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__vector_2>
       c:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_6>
      1c:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_7>
      20:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_8>
      24:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_9>
      28:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_10>
      2c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bb 11 	jmp	0x2376	; 0x2376 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 35       	cpi	r26, 0x56	; 86
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e5       	ldi	r26, 0x56	; 86
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 25 1a 	call	0x344a	; 0x344a <main>
      8a:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e2       	ldi	r26, 0x2B	; 43
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 20 	jmp	0x4108	; 0x4108 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e2       	ldi	r24, 0x2B	; 43
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 20 	jmp	0x4140	; 0x4140 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 20 	jmp	0x4128	; 0x4128 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 20 	jmp	0x4160	; 0x4160 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_Init>:
static void (*Timer1_OCB_Fptr) (void)=NULL;
static void (*Timer1_ICU_Fptr) (void)=NULL;
/******************************************************************************************/
/*timer 0 functions*/
void TIMER0_Init(Timer0Mode_type mode,Timer0Scaler_type scaler)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER0_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <TIMER0_Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	21 f1       	breq	.+72     	; 0xbb2 <TIMER0_Init+0x6c>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <TIMER0_Init+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <TIMER0_Init+0x4e>
     b7c:	54 c0       	rjmp	.+168    	; 0xc26 <TIMER0_Init+0xe0>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	21 f1       	breq	.+72     	; 0xbd0 <TIMER0_Init+0x8a>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	71 f1       	breq	.+92     	; 0xbee <TIMER0_Init+0xa8>
     b92:	49 c0       	rjmp	.+146    	; 0xc26 <TIMER0_Init+0xe0>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24
     bb0:	3a c0       	rjmp	.+116    	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
     bb2:	a3 e5       	ldi	r26, 0x53	; 83
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e3 e5       	ldi	r30, 0x53	; 83
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	8c 93       	st	X, r24
     bce:	2b c0       	rjmp	.+86     	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
     bd0:	a3 e5       	ldi	r26, 0x53	; 83
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7b       	andi	r24, 0xBF	; 191
     bdc:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
     bde:	a3 e5       	ldi	r26, 0x53	; 83
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e3 e5       	ldi	r30, 0x53	; 83
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	88 60       	ori	r24, 0x08	; 8
     bea:	8c 93       	st	X, r24
     bec:	1c c0       	rjmp	.+56     	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 60       	ori	r24, 0x08	; 8
     c08:	8c 93       	st	X, r24
		/*###############################################*/
		// Set On Top Clear On Compare
		SET_BIT(TCCR0_REG, TCCR0_COM01);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 62       	ori	r24, 0x20	; 32
     c16:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_COM00);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8f 7e       	andi	r24, 0xEF	; 239
     c24:	8c 93       	st	X, r24
		/*###############################################*/

		break;
	}
	TCCR0_REG&=0XF8;//0b11111000
     c26:	a3 e5       	ldi	r26, 0x53	; 83
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 7f       	andi	r24, 0xF8	; 248
     c32:	8c 93       	st	X, r24
	TCCR0_REG|=scaler;
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	90 81       	ld	r25, Z
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	89 2b       	or	r24, r25
     c42:	8c 93       	st	X, r24
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <TIMER0_OC0Mode>:

void TIMER0_OC0Mode(OC0Mode_type mode)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	00 d0       	rcall	.+0      	; 0xc58 <TIMER0_OC0Mode+0x6>
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
	switch (mode)
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3b 83       	std	Y+3, r19	; 0x03
     c68:	2a 83       	std	Y+2, r18	; 0x02
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	91 05       	cpc	r25, r1
     c72:	21 f1       	breq	.+72     	; 0xcbc <TIMER0_OC0Mode+0x6a>
     c74:	2a 81       	ldd	r18, Y+2	; 0x02
     c76:	3b 81       	ldd	r19, Y+3	; 0x03
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	2c f4       	brge	.+10     	; 0xc88 <TIMER0_OC0Mode+0x36>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	61 f0       	breq	.+24     	; 0xc9e <TIMER0_OC0Mode+0x4c>
     c86:	46 c0       	rjmp	.+140    	; 0xd14 <TIMER0_OC0Mode+0xc2>
     c88:	2a 81       	ldd	r18, Y+2	; 0x02
     c8a:	3b 81       	ldd	r19, Y+3	; 0x03
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	21 f1       	breq	.+72     	; 0xcda <TIMER0_OC0Mode+0x88>
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	71 f1       	breq	.+92     	; 0xcf8 <TIMER0_OC0Mode+0xa6>
     c9c:	3b c0       	rjmp	.+118    	; 0xd14 <TIMER0_OC0Mode+0xc2>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 7e       	andi	r24, 0xEF	; 239
     caa:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	8c 93       	st	X, r24
     cba:	2c c0       	rjmp	.+88     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
     cbc:	a3 e5       	ldi	r26, 0x53	; 83
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e3 e5       	ldi	r30, 0x53	; 83
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
     cca:	a3 e5       	ldi	r26, 0x53	; 83
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e3 e5       	ldi	r30, 0x53	; 83
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7d       	andi	r24, 0xDF	; 223
     cd6:	8c 93       	st	X, r24
     cd8:	1d c0       	rjmp	.+58     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 62       	ori	r24, 0x20	; 32
     cf4:	8c 93       	st	X, r24
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	8c 93       	st	X, r24
		break;
	}
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TIMER0_OV_InterruptEnable>:

void TIMER0_OV_InterruptEnable(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE0);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <TIMER0_OV_InterruptDisable>:
void TIMER0_OV_InterruptDisable(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE0);
     d44:	a9 e5       	ldi	r26, 0x59	; 89
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e9 e5       	ldi	r30, 0x59	; 89
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	8c 93       	st	X, r24
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <TIMER0_OC_InterruptEnable>:
void TIMER0_OC_InterruptEnable(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE0);
     d60:	a9 e5       	ldi	r26, 0x59	; 89
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e9 e5       	ldi	r30, 0x59	; 89
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER0_OC_InterruptDisable>:
void TIMER0_OC_InterruptDisable(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE0);
     d7c:	a9 e5       	ldi	r26, 0x59	; 89
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e9 e5       	ldi	r30, 0x59	; 89
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	8c 93       	st	X, r24
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <TIMER0_Read_TCNT>:
/*********************READ TCNT***************************************/
u8 TIMER0_Read_TCNT(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
     d98:	e2 e5       	ldi	r30, 0x52	; 82
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TIMER0_CTC_SetOCR0>:


/*********************SET OCR0 Value*********************************/
void TIMER0_CTC_SetOCR0(u8 Local_u8OCRValue)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8OCRValue <=255)
	{

		OCR0_REG = Local_u8OCRValue;
     db0:	ec e5       	ldi	r30, 0x5C	; 92
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	80 83       	st	Z, r24
	}
}
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <Timer0_OVF_SetCallBack>:



/***************************Timer0 callback*************************/
void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Timer0_OVF_SetCallBack+0x6>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	31 f0       	breq	.+12     	; 0xde2 <Timer0_OVF_SetCallBack+0x22>
	{
		Timer0_OVF_Fptr = LocalFptr;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	90 93 57 01 	sts	0x0157, r25
     dde:	80 93 56 01 	sts	0x0156, r24
	}
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <Timer0_CTC_SetCallBack>:



void Timer0_CTC_SetCallBack(void(*LocalFptr)(void))
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <Timer0_CTC_SetCallBack+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	31 f0       	breq	.+12     	; 0xe0e <Timer0_CTC_SetCallBack+0x22>
	{
		Timer0_CTC_Fptr = LocalFptr;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	90 93 59 01 	sts	0x0159, r25
     e0a:	80 93 58 01 	sts	0x0158, r24
	}
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <__vector_11>:

/*********************************Timer 0 ISR functions*********************************************/
ISR(TIMER0_OVF_vect)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULL)
     e42:	80 91 56 01 	lds	r24, 0x0156
     e46:	90 91 57 01 	lds	r25, 0x0157
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	29 f0       	breq	.+10     	; 0xe58 <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
     e4e:	e0 91 56 01 	lds	r30, 0x0156
     e52:	f0 91 57 01 	lds	r31, 0x0157
     e56:	09 95       	icall
	}
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_10>:

ISR(TIMER0_OC_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CTC_Fptr != NULL)
     ea8:	80 91 58 01 	lds	r24, 0x0158
     eac:	90 91 59 01 	lds	r25, 0x0159
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	29 f0       	breq	.+10     	; 0xebe <__vector_10+0x40>
	{
		Timer0_CTC_Fptr();
     eb4:	e0 91 58 01 	lds	r30, 0x0158
     eb8:	f0 91 59 01 	lds	r31, 0x0159
     ebc:	09 95       	icall
	}
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <Timer1_Init>:


/***********************************************************************/
/*timer 1 functions*/
void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <Timer1_Init+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <Timer1_Init+0x8>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3c 83       	std	Y+4, r19	; 0x04
     efc:	2b 83       	std	Y+3, r18	; 0x03
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <Timer1_Init+0x26>
     f08:	56 c0       	rjmp	.+172    	; 0xfb6 <Timer1_Init+0xd2>
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	3c 81       	ldd	r19, Y+4	; 0x04
     f0e:	23 30       	cpi	r18, 0x03	; 3
     f10:	31 05       	cpc	r19, r1
     f12:	54 f4       	brge	.+20     	; 0xf28 <Timer1_Init+0x44>
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	99 f0       	breq	.+38     	; 0xf42 <Timer1_Init+0x5e>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	21 30       	cpi	r18, 0x01	; 1
     f22:	31 05       	cpc	r19, r1
     f24:	59 f1       	breq	.+86     	; 0xf7c <Timer1_Init+0x98>
     f26:	9d c0       	rjmp	.+314    	; 0x1062 <Timer1_Init+0x17e>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <Timer1_Init+0x50>
     f32:	5e c0       	rjmp	.+188    	; 0xff0 <Timer1_Init+0x10c>
     f34:	2b 81       	ldd	r18, Y+3	; 0x03
     f36:	3c 81       	ldd	r19, Y+4	; 0x04
     f38:	24 30       	cpi	r18, 0x04	; 4
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <Timer1_Init+0x5c>
     f3e:	75 c0       	rjmp	.+234    	; 0x102a <Timer1_Init+0x146>
     f40:	90 c0       	rjmp	.+288    	; 0x1062 <Timer1_Init+0x17e>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     f42:	af e4       	ldi	r26, 0x4F	; 79
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ef e4       	ldi	r30, 0x4F	; 79
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     f50:	af e4       	ldi	r26, 0x4F	; 79
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ef e4       	ldi	r30, 0x4F	; 79
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM12);
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	87 7f       	andi	r24, 0xF7	; 247
     f6a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
     f6c:	ae e4       	ldi	r26, 0x4E	; 78
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ee e4       	ldi	r30, 0x4E	; 78
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7e       	andi	r24, 0xEF	; 239
     f78:	8c 93       	st	X, r24
     f7a:	73 c0       	rjmp	.+230    	; 0x1062 <Timer1_Init+0x17e>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     f98:	ae e4       	ldi	r26, 0x4E	; 78
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ee e4       	ldi	r30, 0x4E	; 78
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 60       	ori	r24, 0x08	; 8
     fa4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8c 93       	st	X, r24
     fb4:	56 c0       	rjmp	.+172    	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8e 7f       	andi	r24, 0xFE	; 254
     fc2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     fd2:	ae e4       	ldi	r26, 0x4E	; 78
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ee e4       	ldi	r30, 0x4E	; 78
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
     fe0:	ae e4       	ldi	r26, 0x4E	; 78
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	8c 93       	st	X, r24
     fee:	39 c0       	rjmp	.+114    	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     ff0:	af e4       	ldi	r26, 0x4F	; 79
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     ffe:	af e4       	ldi	r26, 0x4F	; 79
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ef e4       	ldi	r30, 0x4F	; 79
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    100c:	ae e4       	ldi	r26, 0x4E	; 78
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 60       	ori	r24, 0x08	; 8
    1018:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 61       	ori	r24, 0x10	; 16
    1026:	8c 93       	st	X, r24
    1028:	1c c0       	rjmp	.+56     	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
    102a:	af e4       	ldi	r26, 0x4F	; 79
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ef e4       	ldi	r30, 0x4F	; 79
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    1038:	af e4       	ldi	r26, 0x4F	; 79
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ef e4       	ldi	r30, 0x4F	; 79
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    1046:	ae e4       	ldi	r26, 0x4E	; 78
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ee e4       	ldi	r30, 0x4E	; 78
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 60       	ori	r24, 0x08	; 8
    1052:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    1054:	ae e4       	ldi	r26, 0x4E	; 78
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ee e4       	ldi	r30, 0x4E	; 78
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	8c 93       	st	X, r24
		break;
	}

	TCCR1B_REG&=0XF8;
    1062:	ae e4       	ldi	r26, 0x4E	; 78
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ee e4       	ldi	r30, 0x4E	; 78
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 7f       	andi	r24, 0xF8	; 248
    106e:	8c 93       	st	X, r24
	TCCR1B_REG|=scaler;
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	90 81       	ld	r25, Z
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	89 2b       	or	r24, r25
    107e:	8c 93       	st	X, r24

}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <Timer1_OCRA1Mode>:
void Timer1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <Timer1_OCRA1Mode+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3b 83       	std	Y+3, r19	; 0x03
    10a4:	2a 83       	std	Y+2, r18	; 0x02
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	21 f1       	breq	.+72     	; 0x10f8 <Timer1_OCRA1Mode+0x6a>
    10b0:	2a 81       	ldd	r18, Y+2	; 0x02
    10b2:	3b 81       	ldd	r19, Y+3	; 0x03
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <Timer1_OCRA1Mode+0x36>
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <Timer1_OCRA1Mode+0x4c>
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <Timer1_OCRA1Mode+0xc2>
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	3b 81       	ldd	r19, Y+3	; 0x03
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	21 f1       	breq	.+72     	; 0x1116 <Timer1_OCRA1Mode+0x88>
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	9b 81       	ldd	r25, Y+3	; 0x03
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <Timer1_OCRA1Mode+0xa6>
    10d8:	3b c0       	rjmp	.+118    	; 0x1150 <Timer1_OCRA1Mode+0xc2>
	{
	case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    10da:	af e4       	ldi	r26, 0x4F	; 79
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    10e8:	af e4       	ldi	r26, 0x4F	; 79
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ef e4       	ldi	r30, 0x4F	; 79
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	8c 93       	st	X, r24
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	8c 93       	st	X, r24
    1114:	1d c0       	rjmp	.+58     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    1116:	af e4       	ldi	r26, 0x4F	; 79
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ef e4       	ldi	r30, 0x4F	; 79
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7b       	andi	r24, 0xBF	; 191
    1122:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1124:	af e4       	ldi	r26, 0x4F	; 79
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ef e4       	ldi	r30, 0x4F	; 79
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8c 93       	st	X, r24
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    1134:	af e4       	ldi	r26, 0x4F	; 79
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ef e4       	ldi	r30, 0x4F	; 79
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1142:	af e4       	ldi	r26, 0x4F	; 79
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ef e4       	ldi	r30, 0x4F	; 79
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	8c 93       	st	X, r24
		break;
	}
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_OCRB1Mode>:
void Timer1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <Timer1_OCRB1Mode+0x6>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3b 83       	std	Y+3, r19	; 0x03
    1172:	2a 83       	std	Y+2, r18	; 0x02
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	21 f1       	breq	.+72     	; 0x11c6 <Timer1_OCRB1Mode+0x6a>
    117e:	2a 81       	ldd	r18, Y+2	; 0x02
    1180:	3b 81       	ldd	r19, Y+3	; 0x03
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <Timer1_OCRB1Mode+0x36>
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <Timer1_OCRB1Mode+0x4c>
    1190:	46 c0       	rjmp	.+140    	; 0x121e <Timer1_OCRB1Mode+0xc2>
    1192:	2a 81       	ldd	r18, Y+2	; 0x02
    1194:	3b 81       	ldd	r19, Y+3	; 0x03
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	21 f1       	breq	.+72     	; 0x11e4 <Timer1_OCRB1Mode+0x88>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <Timer1_OCRB1Mode+0xa6>
    11a6:	3b c0       	rjmp	.+118    	; 0x121e <Timer1_OCRB1Mode+0xc2>
	{
	case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11a8:	af e4       	ldi	r26, 0x4F	; 79
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ef e4       	ldi	r30, 0x4F	; 79
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11b6:	af e4       	ldi	r26, 0x4F	; 79
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	ef e4       	ldi	r30, 0x4F	; 79
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 7d       	andi	r24, 0xDF	; 223
    11c2:	8c 93       	st	X, r24
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7d       	andi	r24, 0xDF	; 223
    11e0:	8c 93       	st	X, r24
    11e2:	1d c0       	rjmp	.+58     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11e4:	af e4       	ldi	r26, 0x4F	; 79
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef e4       	ldi	r30, 0x4F	; 79
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 7e       	andi	r24, 0xEF	; 239
    11f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 62       	ori	r24, 0x20	; 32
    11fe:	8c 93       	st	X, r24
    1200:	0e c0       	rjmp	.+28     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    1202:	af e4       	ldi	r26, 0x4F	; 79
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e4       	ldi	r30, 0x4F	; 79
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 62       	ori	r24, 0x20	; 32
    121c:	8c 93       	st	X, r24
		break;
	}
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <Timer1_InputCaptureEdge>:
void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	88 23       	and	r24, r24
    123a:	41 f4       	brne	.+16     	; 0x124c <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B_REG,TCCR1B_ICES1);
    123c:	ae e4       	ldi	r26, 0x4E	; 78
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ee e4       	ldi	r30, 0x4E	; 78
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	8c 93       	st	X, r24
    124a:	0a c0       	rjmp	.+20     	; 0x1260 <Timer1_InputCaptureEdge+0x36>

	else if(edge==FALLING)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	39 f4       	brne	.+14     	; 0x1260 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B_REG,TCCR1B_ICES1);
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 7b       	andi	r24, 0xBF	; 191
    125e:	8c 93       	st	X, r24
}
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <Timer1_ReadInputCaptureValue>:

u8 Timer1_ReadInputCaptureValue(void)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    1270:	e6 e4       	ldi	r30, 0x46	; 70
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <Timer1_ICU_InterruptEnable>:


/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TICIE1);
    1286:	a9 e5       	ldi	r26, 0x59	; 89
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e9 e5       	ldi	r30, 0x59	; 89
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	8c 93       	st	X, r24
}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TICIE1);
    12a2:	a9 e5       	ldi	r26, 0x59	; 89
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e9 e5       	ldi	r30, 0x59	; 89
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	8c 93       	st	X, r24
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
    12be:	a9 e5       	ldi	r26, 0x59	; 89
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e9 e5       	ldi	r30, 0x59	; 89
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	84 60       	ori	r24, 0x04	; 4
    12ca:	8c 93       	st	X, r24
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE1);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	8c 93       	st	X, r24
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1A);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7e       	andi	r24, 0xEF	; 239
    131e:	8c 93       	st	X, r24
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1B);
    132e:	a9 e5       	ldi	r26, 0x59	; 89
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e9 e5       	ldi	r30, 0x59	; 89
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	8c 93       	st	X, r24
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1B);
    134a:	a9 e5       	ldi	r26, 0x59	; 89
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e9 e5       	ldi	r30, 0x59	; 89
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	8c 93       	st	X, r24
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <TIMER1_PreloadOCR1B>:

void TIMER1_PreloadOCR1B(u16 preload_value)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <TIMER1_PreloadOCR1B+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG = preload_value;
    136c:	e8 e4       	ldi	r30, 0x48	; 72
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <TIMER1_PreloadOCR1A>:
void TIMER1_PreloadOCR1A(u16 preload_value)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <TIMER1_PreloadOCR1A+0x6>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = preload_value;
    1390:	ea e4       	ldi	r30, 0x4A	; 74
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Timer1_OVF_SetCallBack>:


/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Timer1_OVF_SetCallBack+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	90 93 5b 01 	sts	0x015B, r25
    13bc:	80 93 5a 01 	sts	0x015A, r24
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Timer1_OCA_SetCallBack+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	90 93 5d 01 	sts	0x015D, r25
    13e0:	80 93 5c 01 	sts	0x015C, r24
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <Timer1_OCB_SetCallBack+0x6>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	90 93 5f 01 	sts	0x015F, r25
    1404:	80 93 5e 01 	sts	0x015E, r24
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <Timer1_ICU_SetCallBack+0x6>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	90 93 61 01 	sts	0x0161, r25
    1428:	80 93 60 01 	sts	0x0160, r24
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULL)
    1460:	80 91 5a 01 	lds	r24, 0x015A
    1464:	90 91 5b 01 	lds	r25, 0x015B
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	29 f0       	breq	.+10     	; 0x1476 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    146c:	e0 91 5a 01 	lds	r30, 0x015A
    1470:	f0 91 5b 01 	lds	r31, 0x015B
    1474:	09 95       	icall
	}
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULL)
    14c6:	80 91 5c 01 	lds	r24, 0x015C
    14ca:	90 91 5d 01 	lds	r25, 0x015D
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    14d2:	e0 91 5c 01 	lds	r30, 0x015C
    14d6:	f0 91 5d 01 	lds	r31, 0x015D
    14da:	09 95       	icall
	}
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULL)
    152c:	80 91 5e 01 	lds	r24, 0x015E
    1530:	90 91 5f 01 	lds	r25, 0x015F
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    1538:	e0 91 5e 01 	lds	r30, 0x015E
    153c:	f0 91 5f 01 	lds	r31, 0x015F
    1540:	09 95       	icall
	}
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULL)
    1592:	80 91 60 01 	lds	r24, 0x0160
    1596:	90 91 61 01 	lds	r25, 0x0161
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    159e:	e0 91 60 01 	lds	r30, 0x0160
    15a2:	f0 91 61 01 	lds	r31, 0x0161
    15a6:	09 95       	icall
	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <GIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(SREG,SREG_I);
    15d6:	af e5       	ldi	r26, 0x5F	; 95
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ef e5       	ldi	r30, 0x5F	; 95
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 68       	ori	r24, 0x80	; 128
    15e2:	8c 93       	st	X, r24
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    15f2:	af e5       	ldi	r26, 0x5F	; 95
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef e5       	ldi	r30, 0x5F	; 95
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 77       	andi	r24, 0x7F	; 127
    15fe:	8c 93       	st	X, r24

}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <EXIT_voidINT0Init>:
void (*EXIT_INT0PtrFunc) (void)=NULL;
void (*EXIT_INT1PtrFunc) (void)=NULL;
void (*EXIT_INT2PtrFunc) (void)=NULL;

void EXIT_voidINT0Init(void)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
#if INT0_SENSE == FALLING_EDGE
	/*set sense control for INT0 as falling edge*/
	SET_BIT(MCUCR,MCUCR_ISC01);
    160e:	a5 e5       	ldi	r26, 0x55	; 85
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e5 e5       	ldi	r30, 0x55	; 85
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	82 60       	ori	r24, 0x02	; 2
    161a:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC00);
    161c:	a5 e5       	ldi	r26, 0x55	; 85
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e5 e5       	ldi	r30, 0x55	; 85
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	80 81       	ld	r24, Z
    1626:	8e 7f       	andi	r24, 0xFE	; 254
    1628:	8c 93       	st	X, r24

#endif

#if INT0_INITIAL_STATE ==ENABELD
	/*peripheral interrupt enable for INT0*/
	SET_BIT(GICR,GICR_INT0);
    162a:	ab e5       	ldi	r26, 0x5B	; 91
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e5       	ldi	r30, 0x5B	; 91
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	80 64       	ori	r24, 0x40	; 64
    1636:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT0);
#else
#error "Wrong input of initial state"
#endif

}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <EXIT_voidINT1Init>:

void EXIT_voidINT1Init(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62

#if INT1_SENSE == FALLING_EDGE   // falling edge
	/*set sense control for INT1 as falling edge*/
	SET_BIT(MCUCR,MCUCR_ISC11);
    1646:	a5 e5       	ldi	r26, 0x55	; 85
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e5 e5       	ldi	r30, 0x55	; 85
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	88 60       	ori	r24, 0x08	; 8
    1652:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1654:	a5 e5       	ldi	r26, 0x55	; 85
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e5 e5       	ldi	r30, 0x55	; 85
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8b 7f       	andi	r24, 0xFB	; 251
    1660:	8c 93       	st	X, r24
#endif


#if INT1_INITIAL_STATE==ENABELD
	/*peripheral interrupt enable for INT1*/
	SET_BIT(GICR,GICR_INT1);
    1662:	ab e5       	ldi	r26, 0x5B	; 91
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	eb e5       	ldi	r30, 0x5B	; 91
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	8c 93       	st	X, r24
#else
#error "Wrong input of initial state"
#endif


}
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <EXIT_voidINT2Init>:


void EXIT_voidINT2Init(void)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62


#if INT2_SENSE == FALLING_EDGE   // falling edge
	/*set sense control for INT2 as falling edge*/
	CLR_BIT(MCUCSR,MCUCSR_ISC2);
    167e:	a4 e5       	ldi	r26, 0x54	; 84
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e4 e5       	ldi	r30, 0x54	; 84
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	8f 7b       	andi	r24, 0xBF	; 191
    168a:	8c 93       	st	X, r24
#error "Wrong input of sense control"
#endif

#if INT2_INITIAL_STATE ==ENABELD
	/*peripheral interrupt enable for INT2*/
	SET_BIT(GICR,GICR_INT2);
    168c:	ab e5       	ldi	r26, 0x5B	; 91
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e5       	ldi	r30, 0x5B	; 91
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 62       	ori	r24, 0x20	; 32
    1698:	8c 93       	st	X, r24
	CLR_BIT(GICR,GICR_INT2);
#else
#error "Wrong input of initial state"
#endif

}
    169a:	cf 91       	pop	r28
    169c:	df 91       	pop	r29
    169e:	08 95       	ret

000016a0 <EXIT_u8INT0_SetSenseControl>:


u8 EXIT_u8INT0_SetSenseControl(u8 copy_u8sense)
{
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <EXIT_u8INT0_SetSenseControl+0x6>
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <EXIT_u8INT0_SetSenseControl+0x8>
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    16ae:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3c 83       	std	Y+4, r19	; 0x04
    16b8:	2b 83       	std	Y+3, r18	; 0x03
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	91 05       	cpc	r25, r1
    16c2:	99 f1       	breq	.+102    	; 0x172a <EXIT_u8INT0_SetSenseControl+0x8a>
    16c4:	2b 81       	ldd	r18, Y+3	; 0x03
    16c6:	3c 81       	ldd	r19, Y+4	; 0x04
    16c8:	23 30       	cpi	r18, 0x03	; 3
    16ca:	31 05       	cpc	r19, r1
    16cc:	34 f4       	brge	.+12     	; 0x16da <EXIT_u8INT0_SetSenseControl+0x3a>
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	9c 81       	ldd	r25, Y+4	; 0x04
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	91 05       	cpc	r25, r1
    16d6:	c1 f1       	breq	.+112    	; 0x1748 <EXIT_u8INT0_SetSenseControl+0xa8>
    16d8:	46 c0       	rjmp	.+140    	; 0x1766 <EXIT_u8INT0_SetSenseControl+0xc6>
    16da:	2b 81       	ldd	r18, Y+3	; 0x03
    16dc:	3c 81       	ldd	r19, Y+4	; 0x04
    16de:	23 30       	cpi	r18, 0x03	; 3
    16e0:	31 05       	cpc	r19, r1
    16e2:	a1 f0       	breq	.+40     	; 0x170c <EXIT_u8INT0_SetSenseControl+0x6c>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	9c 81       	ldd	r25, Y+4	; 0x04
    16e8:	84 30       	cpi	r24, 0x04	; 4
    16ea:	91 05       	cpc	r25, r1
    16ec:	e1 f5       	brne	.+120    	; 0x1766 <EXIT_u8INT0_SetSenseControl+0xc6>
	{
	case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    16ee:	a5 e5       	ldi	r26, 0x55	; 85
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e5 e5       	ldi	r30, 0x55	; 85
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	82 60       	ori	r24, 0x02	; 2
    16fa:	8c 93       	st	X, r24
    16fc:	a5 e5       	ldi	r26, 0x55	; 85
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e5 e5       	ldi	r30, 0x55	; 85
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	8c 93       	st	X, r24
    170a:	2f c0       	rjmp	.+94     	; 0x176a <EXIT_u8INT0_SetSenseControl+0xca>
	case FALLING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    170c:	a5 e5       	ldi	r26, 0x55	; 85
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e5       	ldi	r30, 0x55	; 85
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	82 60       	ori	r24, 0x02	; 2
    1718:	8c 93       	st	X, r24
    171a:	a5 e5       	ldi	r26, 0x55	; 85
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e5 e5       	ldi	r30, 0x55	; 85
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	8e 7f       	andi	r24, 0xFE	; 254
    1726:	8c 93       	st	X, r24
    1728:	20 c0       	rjmp	.+64     	; 0x176a <EXIT_u8INT0_SetSenseControl+0xca>
	case ON_CHANGE   :	CLR_BIT(MCUCR,MCUCR_ISC01); SET_BIT(MCUCR,MCUCR_ISC00); break;
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8d 7f       	andi	r24, 0xFD	; 253
    1736:	8c 93       	st	X, r24
    1738:	a5 e5       	ldi	r26, 0x55	; 85
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e5       	ldi	r30, 0x55	; 85
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	81 60       	ori	r24, 0x01	; 1
    1744:	8c 93       	st	X, r24
    1746:	11 c0       	rjmp	.+34     	; 0x176a <EXIT_u8INT0_SetSenseControl+0xca>
	case LOW_LEVEL	 :	CLR_BIT(MCUCR,MCUCR_ISC01); CLR_BIT(MCUCR,MCUCR_ISC00); break;
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8d 7f       	andi	r24, 0xFD	; 253
    1754:	8c 93       	st	X, r24
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8e 7f       	andi	r24, 0xFE	; 254
    1762:	8c 93       	st	X, r24
    1764:	02 c0       	rjmp	.+4      	; 0x176a <EXIT_u8INT0_SetSenseControl+0xca>
	default : Local_u8Error_State=NOK;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    176a:	89 81       	ldd	r24, Y+1	; 0x01
}
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	0f 90       	pop	r0
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <EXIT_u8INT1_SetSenseControl>:

u8 EXIT_u8INT1_SetSenseControl(u8 copy_u8sense)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <EXIT_u8INT1_SetSenseControl+0x6>
    1780:	00 d0       	rcall	.+0      	; 0x1782 <EXIT_u8INT1_SetSenseControl+0x8>
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1788:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	3c 83       	std	Y+4, r19	; 0x04
    1792:	2b 83       	std	Y+3, r18	; 0x03
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	91 05       	cpc	r25, r1
    179c:	99 f1       	breq	.+102    	; 0x1804 <EXIT_u8INT1_SetSenseControl+0x8a>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	23 30       	cpi	r18, 0x03	; 3
    17a4:	31 05       	cpc	r19, r1
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <EXIT_u8INT1_SetSenseControl+0x3a>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	91 05       	cpc	r25, r1
    17b0:	c1 f1       	breq	.+112    	; 0x1822 <EXIT_u8INT1_SetSenseControl+0xa8>
    17b2:	46 c0       	rjmp	.+140    	; 0x1840 <EXIT_u8INT1_SetSenseControl+0xc6>
    17b4:	2b 81       	ldd	r18, Y+3	; 0x03
    17b6:	3c 81       	ldd	r19, Y+4	; 0x04
    17b8:	23 30       	cpi	r18, 0x03	; 3
    17ba:	31 05       	cpc	r19, r1
    17bc:	a1 f0       	breq	.+40     	; 0x17e6 <EXIT_u8INT1_SetSenseControl+0x6c>
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	84 30       	cpi	r24, 0x04	; 4
    17c4:	91 05       	cpc	r25, r1
    17c6:	e1 f5       	brne	.+120    	; 0x1840 <EXIT_u8INT1_SetSenseControl+0xc6>
	{
	case RISING_EDGE :  SET_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    17c8:	a5 e5       	ldi	r26, 0x55	; 85
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e5 e5       	ldi	r30, 0x55	; 85
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	88 60       	ori	r24, 0x08	; 8
    17d4:	8c 93       	st	X, r24
    17d6:	a5 e5       	ldi	r26, 0x55	; 85
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e5       	ldi	r30, 0x55	; 85
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	84 60       	ori	r24, 0x04	; 4
    17e2:	8c 93       	st	X, r24
    17e4:	2f c0       	rjmp	.+94     	; 0x1844 <EXIT_u8INT1_SetSenseControl+0xca>
	case FALLING_EDGE: 	SET_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    17e6:	a5 e5       	ldi	r26, 0x55	; 85
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e5 e5       	ldi	r30, 0x55	; 85
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	88 60       	ori	r24, 0x08	; 8
    17f2:	8c 93       	st	X, r24
    17f4:	a5 e5       	ldi	r26, 0x55	; 85
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e5       	ldi	r30, 0x55	; 85
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	8b 7f       	andi	r24, 0xFB	; 251
    1800:	8c 93       	st	X, r24
    1802:	20 c0       	rjmp	.+64     	; 0x1844 <EXIT_u8INT1_SetSenseControl+0xca>
	case ON_CHANGE   :	CLR_BIT(MCUCR,MCUCR_ISC11); SET_BIT(MCUCR,MCUCR_ISC10); break;
    1804:	a5 e5       	ldi	r26, 0x55	; 85
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e5       	ldi	r30, 0x55	; 85
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	87 7f       	andi	r24, 0xF7	; 247
    1810:	8c 93       	st	X, r24
    1812:	a5 e5       	ldi	r26, 0x55	; 85
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e5       	ldi	r30, 0x55	; 85
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	84 60       	ori	r24, 0x04	; 4
    181e:	8c 93       	st	X, r24
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <EXIT_u8INT1_SetSenseControl+0xca>
	case LOW_LEVEL	 :	CLR_BIT(MCUCR,MCUCR_ISC11); CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1822:	a5 e5       	ldi	r26, 0x55	; 85
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e5 e5       	ldi	r30, 0x55	; 85
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	87 7f       	andi	r24, 0xF7	; 247
    182e:	8c 93       	st	X, r24
    1830:	a5 e5       	ldi	r26, 0x55	; 85
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e5       	ldi	r30, 0x55	; 85
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8b 7f       	andi	r24, 0xFB	; 251
    183c:	8c 93       	st	X, r24
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <EXIT_u8INT1_SetSenseControl+0xca>
	default : Local_u8Error_State=NOK;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <EXIT_u8INT2_SetSenseControl>:


u8 EXIT_u8INT2_SetSenseControl(u8 copy_u8sense)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <EXIT_u8INT2_SetSenseControl+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <EXIT_u8INT2_SetSenseControl+0x8>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1862:	19 82       	std	Y+1, r1	; 0x01
	switch(copy_u8sense)
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3c 83       	std	Y+4, r19	; 0x04
    186c:	2b 83       	std	Y+3, r18	; 0x03
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	83 30       	cpi	r24, 0x03	; 3
    1874:	91 05       	cpc	r25, r1
    1876:	69 f0       	breq	.+26     	; 0x1892 <EXIT_u8INT2_SetSenseControl+0x3e>
    1878:	2b 81       	ldd	r18, Y+3	; 0x03
    187a:	3c 81       	ldd	r19, Y+4	; 0x04
    187c:	24 30       	cpi	r18, 0x04	; 4
    187e:	31 05       	cpc	r19, r1
    1880:	81 f4       	brne	.+32     	; 0x18a2 <EXIT_u8INT2_SetSenseControl+0x4e>
	{
	case RISING_EDGE :  SET_BIT(MCUCSR,MCUCSR_ISC2); break;
    1882:	a4 e5       	ldi	r26, 0x54	; 84
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e4 e5       	ldi	r30, 0x54	; 84
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	8c 93       	st	X, r24
    1890:	0a c0       	rjmp	.+20     	; 0x18a6 <EXIT_u8INT2_SetSenseControl+0x52>
	case FALLING_EDGE: 	CLR_BIT(MCUCSR,MCUCSR_ISC2); break;
    1892:	a4 e5       	ldi	r26, 0x54	; 84
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e5       	ldi	r30, 0x54	; 84
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	8c 93       	st	X, r24
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <EXIT_u8INT2_SetSenseControl+0x52>
	default : Local_u8Error_State=NOK;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <EXIT_u8INT_Enable>:

u8 EXIT_u8INT_Enable(u8 copy_u8Int)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <EXIT_u8INT_Enable+0x6>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    18c2:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Int == INT0)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	41 f4       	brne	.+16     	; 0x18da <EXIT_u8INT_Enable+0x24>
	{
		SET_BIT(GICR,GICR_INT0);
    18ca:	ab e5       	ldi	r26, 0x5B	; 91
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e5       	ldi	r30, 0x5B	; 91
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	80 64       	ori	r24, 0x40	; 64
    18d6:	8c 93       	st	X, r24
    18d8:	18 c0       	rjmp	.+48     	; 0x190a <EXIT_u8INT_Enable+0x54>
	}
	else if (copy_u8Int == INT1)
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	41 f4       	brne	.+16     	; 0x18f0 <EXIT_u8INT_Enable+0x3a>
	{
		SET_BIT(GICR,GICR_INT1);
    18e0:	ab e5       	ldi	r26, 0x5B	; 91
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	eb e5       	ldi	r30, 0x5B	; 91
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	80 68       	ori	r24, 0x80	; 128
    18ec:	8c 93       	st	X, r24
    18ee:	0d c0       	rjmp	.+26     	; 0x190a <EXIT_u8INT_Enable+0x54>
	}
	else if(copy_u8Int == INT2)
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	41 f4       	brne	.+16     	; 0x1906 <EXIT_u8INT_Enable+0x50>
	{
		SET_BIT(GICR,GICR_INT2);
    18f6:	ab e5       	ldi	r26, 0x5B	; 91
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	eb e5       	ldi	r30, 0x5B	; 91
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	80 62       	ori	r24, 0x20	; 32
    1902:	8c 93       	st	X, r24
    1904:	02 c0       	rjmp	.+4      	; 0x190a <EXIT_u8INT_Enable+0x54>
	}
	else
	{
		Local_u8Error_State=NOK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    190a:	89 81       	ldd	r24, Y+1	; 0x01


}
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <EXIT_u8INT_Disable>:

u8 EXIT_u8INT_Disable(u8 copy_u8Int)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <EXIT_u8INT_Disable+0x6>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1922:	19 82       	std	Y+1, r1	; 0x01
	if(copy_u8Int == INT0)
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	41 f4       	brne	.+16     	; 0x193a <EXIT_u8INT_Disable+0x24>
	{
		CLR_BIT(GICR,GICR_INT0);
    192a:	ab e5       	ldi	r26, 0x5B	; 91
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	eb e5       	ldi	r30, 0x5B	; 91
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	8f 7b       	andi	r24, 0xBF	; 191
    1936:	8c 93       	st	X, r24
    1938:	18 c0       	rjmp	.+48     	; 0x196a <EXIT_u8INT_Disable+0x54>
	}
	else if (copy_u8Int == INT1)
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	82 30       	cpi	r24, 0x02	; 2
    193e:	41 f4       	brne	.+16     	; 0x1950 <EXIT_u8INT_Disable+0x3a>
	{
		CLR_BIT(GICR,GICR_INT1);
    1940:	ab e5       	ldi	r26, 0x5B	; 91
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	eb e5       	ldi	r30, 0x5B	; 91
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	8f 77       	andi	r24, 0x7F	; 127
    194c:	8c 93       	st	X, r24
    194e:	0d c0       	rjmp	.+26     	; 0x196a <EXIT_u8INT_Disable+0x54>
	}
	else if(copy_u8Int == INT2)
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	83 30       	cpi	r24, 0x03	; 3
    1954:	41 f4       	brne	.+16     	; 0x1966 <EXIT_u8INT_Disable+0x50>
	{
		CLR_BIT(GICR,GICR_INT2);
    1956:	ab e5       	ldi	r26, 0x5B	; 91
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	eb e5       	ldi	r30, 0x5B	; 91
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 7d       	andi	r24, 0xDF	; 223
    1962:	8c 93       	st	X, r24
    1964:	02 c0       	rjmp	.+4      	; 0x196a <EXIT_u8INT_Disable+0x54>
	}
	else
	{
		Local_u8Error_State=NOK;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    196a:	89 81       	ldd	r24, Y+1	; 0x01

}
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <EXIT_u8Int0SetCallBack>:



/*call back function of int0*/
u8 EXIT_u8Int0SetCallBack(void (*copy_Int0PtrFunc)(void))
{
    1976:	df 93       	push	r29
    1978:	cf 93       	push	r28
    197a:	00 d0       	rcall	.+0      	; 0x197c <EXIT_u8Int0SetCallBack+0x6>
    197c:	0f 92       	push	r0
    197e:	cd b7       	in	r28, 0x3d	; 61
    1980:	de b7       	in	r29, 0x3e	; 62
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1986:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int0PtrFunc!=NULL)
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	39 f0       	breq	.+14     	; 0x199e <EXIT_u8Int0SetCallBack+0x28>
	{
		EXIT_INT0PtrFunc=copy_Int0PtrFunc;
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	90 93 63 01 	sts	0x0163, r25
    1998:	80 93 62 01 	sts	0x0162, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <EXIT_u8Int0SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <__vector_1>:

/*ISR OF INT0*/
void __vector_1 (void)  __attribute__((signal));
void __vector_1 (void)

{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT0PtrFunc!=NULL)
    19da:	80 91 62 01 	lds	r24, 0x0162
    19de:	90 91 63 01 	lds	r25, 0x0163
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__vector_1+0x40>
	{
		EXIT_INT0PtrFunc();
    19e6:	e0 91 62 01 	lds	r30, 0x0162
    19ea:	f0 91 63 01 	lds	r31, 0x0163
    19ee:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <EXIT_u8Int1SetCallBack>:


/*call back function of int1*/
u8 EXIT_u8Int1SetCallBack(void (*copy_Int1PtrFunc)(void))
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <EXIT_u8Int1SetCallBack+0x6>
    1a1c:	0f 92       	push	r0
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	9b 83       	std	Y+3, r25	; 0x03
    1a24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1a26:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int1PtrFunc!=NULL)
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <EXIT_u8Int1SetCallBack+0x28>
	{
		EXIT_INT1PtrFunc=copy_Int1PtrFunc;
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	90 93 65 01 	sts	0x0165, r25
    1a38:	80 93 64 01 	sts	0x0164, r24
    1a3c:	02 c0       	rjmp	.+4      	; 0x1a42 <EXIT_u8Int1SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
    1a3e:	82 e0       	ldi	r24, 0x02	; 2
    1a40:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <__vector_2>:

/*ISR OF INT2*/
void __vector_2 (void)  __attribute__((signal));
void __vector_2 (void)

{
    1a50:	1f 92       	push	r1
    1a52:	0f 92       	push	r0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	0f 92       	push	r0
    1a58:	11 24       	eor	r1, r1
    1a5a:	2f 93       	push	r18
    1a5c:	3f 93       	push	r19
    1a5e:	4f 93       	push	r20
    1a60:	5f 93       	push	r21
    1a62:	6f 93       	push	r22
    1a64:	7f 93       	push	r23
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	af 93       	push	r26
    1a6c:	bf 93       	push	r27
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
    1a72:	df 93       	push	r29
    1a74:	cf 93       	push	r28
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT1PtrFunc!=NULL)
    1a7a:	80 91 64 01 	lds	r24, 0x0164
    1a7e:	90 91 65 01 	lds	r25, 0x0165
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <__vector_2+0x40>
	{
		EXIT_INT1PtrFunc();
    1a86:	e0 91 64 01 	lds	r30, 0x0164
    1a8a:	f0 91 65 01 	lds	r31, 0x0165
    1a8e:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    1a90:	cf 91       	pop	r28
    1a92:	df 91       	pop	r29
    1a94:	ff 91       	pop	r31
    1a96:	ef 91       	pop	r30
    1a98:	bf 91       	pop	r27
    1a9a:	af 91       	pop	r26
    1a9c:	9f 91       	pop	r25
    1a9e:	8f 91       	pop	r24
    1aa0:	7f 91       	pop	r23
    1aa2:	6f 91       	pop	r22
    1aa4:	5f 91       	pop	r21
    1aa6:	4f 91       	pop	r20
    1aa8:	3f 91       	pop	r19
    1aaa:	2f 91       	pop	r18
    1aac:	0f 90       	pop	r0
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	0f 90       	pop	r0
    1ab2:	1f 90       	pop	r1
    1ab4:	18 95       	reti

00001ab6 <EXIT_u8Int2SetCallBack>:



/*call back function of int2*/
u8 EXIT_u8Int2SetCallBack(void (*copy_Int2PtrFunc)(void))
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <EXIT_u8Int2SetCallBack+0x6>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9b 83       	std	Y+3, r25	; 0x03
    1ac4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Error_State=OK ;
    1ac6:	19 82       	std	Y+1, r1	; 0x01
	if(copy_Int2PtrFunc!=NULL)
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	9b 81       	ldd	r25, Y+3	; 0x03
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	39 f0       	breq	.+14     	; 0x1ade <EXIT_u8Int2SetCallBack+0x28>
	{
		EXIT_INT2PtrFunc=copy_Int2PtrFunc;
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	90 93 67 01 	sts	0x0167, r25
    1ad8:	80 93 66 01 	sts	0x0166, r24
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <EXIT_u8Int2SetCallBack+0x2c>
	}
	else
	{
		Local_u8Error_State=NULL_POINTER;
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_State;
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <__vector_3>:

/*ISR OF INT2*/
void __vector_3 (void)  __attribute__((signal));
void __vector_3 (void)

{
    1af0:	1f 92       	push	r1
    1af2:	0f 92       	push	r0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	if(EXIT_INT2PtrFunc!=NULL)
    1b1a:	80 91 66 01 	lds	r24, 0x0166
    1b1e:	90 91 67 01 	lds	r25, 0x0167
    1b22:	00 97       	sbiw	r24, 0x00	; 0
    1b24:	29 f0       	breq	.+10     	; 0x1b30 <__vector_3+0x40>
	{
		EXIT_INT2PtrFunc();
    1b26:	e0 91 66 01 	lds	r30, 0x0166
    1b2a:	f0 91 67 01 	lds	r31, 0x0167
    1b2e:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    1b30:	cf 91       	pop	r28
    1b32:	df 91       	pop	r29
    1b34:	ff 91       	pop	r31
    1b36:	ef 91       	pop	r30
    1b38:	bf 91       	pop	r27
    1b3a:	af 91       	pop	r26
    1b3c:	9f 91       	pop	r25
    1b3e:	8f 91       	pop	r24
    1b40:	7f 91       	pop	r23
    1b42:	6f 91       	pop	r22
    1b44:	5f 91       	pop	r21
    1b46:	4f 91       	pop	r20
    1b48:	3f 91       	pop	r19
    1b4a:	2f 91       	pop	r18
    1b4c:	0f 90       	pop	r0
    1b4e:	0f be       	out	0x3f, r0	; 63
    1b50:	0f 90       	pop	r0
    1b52:	1f 90       	pop	r1
    1b54:	18 95       	reti

00001b56 <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	28 97       	sbiw	r28, 0x08	; 8
    1b60:	0f b6       	in	r0, 0x3f	; 63
    1b62:	f8 94       	cli
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	0f be       	out	0x3f, r0	; 63
    1b68:	cd bf       	out	0x3d, r28	; 61
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    1b6c:	6b 83       	std	Y+3, r22	; 0x03
    1b6e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error_Sate =0;
    1b70:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 30       	cpi	r24, 0x08	; 8
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <DIO_u8SetPinDirection+0x24>
    1b78:	f4 c0       	rjmp	.+488    	; 0x1d62 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction ==DIO_u8_PIN_OUTPUT)
    1b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <DIO_u8SetPinDirection+0x2c>
    1b80:	72 c0       	rjmp	.+228    	; 0x1c66 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	38 87       	std	Y+8, r19	; 0x08
    1b8a:	2f 83       	std	Y+7, r18	; 0x07
    1b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8e:	98 85       	ldd	r25, Y+8	; 0x08
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	91 05       	cpc	r25, r1
    1b94:	49 f1       	breq	.+82     	; 0x1be8 <DIO_u8SetPinDirection+0x92>
    1b96:	2f 81       	ldd	r18, Y+7	; 0x07
    1b98:	38 85       	ldd	r19, Y+8	; 0x08
    1b9a:	22 30       	cpi	r18, 0x02	; 2
    1b9c:	31 05       	cpc	r19, r1
    1b9e:	2c f4       	brge	.+10     	; 0x1baa <DIO_u8SetPinDirection+0x54>
    1ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba2:	98 85       	ldd	r25, Y+8	; 0x08
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	61 f0       	breq	.+24     	; 0x1bc0 <DIO_u8SetPinDirection+0x6a>
    1ba8:	5b c0       	rjmp	.+182    	; 0x1c60 <DIO_u8SetPinDirection+0x10a>
    1baa:	2f 81       	ldd	r18, Y+7	; 0x07
    1bac:	38 85       	ldd	r19, Y+8	; 0x08
    1bae:	22 30       	cpi	r18, 0x02	; 2
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	71 f1       	breq	.+92     	; 0x1c10 <DIO_u8SetPinDirection+0xba>
    1bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb6:	98 85       	ldd	r25, Y+8	; 0x08
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	e9 f1       	breq	.+122    	; 0x1c38 <DIO_u8SetPinDirection+0xe2>
    1bbe:	50 c0       	rjmp	.+160    	; 0x1c60 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1bc0:	aa e3       	ldi	r26, 0x3A	; 58
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	ea e3       	ldi	r30, 0x3A	; 58
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_u8SetPinDirection+0x88>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_u8SetPinDirection+0x84>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	bf c0       	rjmp	.+382    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1be8:	a7 e3       	ldi	r26, 0x37	; 55
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	e7 e3       	ldi	r30, 0x37	; 55
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_u8SetPinDirection+0xb0>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_u8SetPinDirection+0xac>
    1c0a:	84 2b       	or	r24, r20
    1c0c:	8c 93       	st	X, r24
    1c0e:	ab c0       	rjmp	.+342    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1c10:	a4 e3       	ldi	r26, 0x34	; 52
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e4 e3       	ldi	r30, 0x34	; 52
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_u8SetPinDirection+0xd8>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_u8SetPinDirection+0xd4>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	97 c0       	rjmp	.+302    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    1c38:	a1 e3       	ldi	r26, 0x31	; 49
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e1 e3       	ldi	r30, 0x31	; 49
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_u8SetPinDirection+0x100>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_u8SetPinDirection+0xfc>
    1c5a:	84 2b       	or	r24, r20
    1c5c:	8c 93       	st	X, r24
    1c5e:	83 c0       	rjmp	.+262    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	80 c0       	rjmp	.+256    	; 0x1d66 <DIO_u8SetPinDirection+0x210>

			}
		}
		else if(Copy_u8Direction ==DIO_u8_PIN_INPUT)
    1c66:	8c 81       	ldd	r24, Y+4	; 0x04
    1c68:	88 23       	and	r24, r24
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <DIO_u8SetPinDirection+0x118>
    1c6c:	77 c0       	rjmp	.+238    	; 0x1d5c <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3e 83       	std	Y+6, r19	; 0x06
    1c76:	2d 83       	std	Y+5, r18	; 0x05
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	59 f1       	breq	.+86     	; 0x1cd8 <DIO_u8SetPinDirection+0x182>
    1c82:	2d 81       	ldd	r18, Y+5	; 0x05
    1c84:	3e 81       	ldd	r19, Y+6	; 0x06
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <DIO_u8SetPinDirection+0x140>
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f0       	breq	.+26     	; 0x1cae <DIO_u8SetPinDirection+0x158>
    1c94:	60 c0       	rjmp	.+192    	; 0x1d56 <DIO_u8SetPinDirection+0x200>
    1c96:	2d 81       	ldd	r18, Y+5	; 0x05
    1c98:	3e 81       	ldd	r19, Y+6	; 0x06
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	89 f1       	breq	.+98     	; 0x1d02 <DIO_u8SetPinDirection+0x1ac>
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	09 f4       	brne	.+2      	; 0x1cac <DIO_u8SetPinDirection+0x156>
    1caa:	40 c0       	rjmp	.+128    	; 0x1d2c <DIO_u8SetPinDirection+0x1d6>
    1cac:	54 c0       	rjmp	.+168    	; 0x1d56 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1cae:	aa e3       	ldi	r26, 0x3A	; 58
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ea e3       	ldi	r30, 0x3A	; 58
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	80 81       	ld	r24, Z
    1cb8:	48 2f       	mov	r20, r24
    1cba:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	02 2e       	mov	r0, r18
    1cc6:	02 c0       	rjmp	.+4      	; 0x1ccc <DIO_u8SetPinDirection+0x176>
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	0a 94       	dec	r0
    1cce:	e2 f7       	brpl	.-8      	; 0x1cc8 <DIO_u8SetPinDirection+0x172>
    1cd0:	80 95       	com	r24
    1cd2:	84 23       	and	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	47 c0       	rjmp	.+142    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1cd8:	a7 e3       	ldi	r26, 0x37	; 55
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	e7 e3       	ldi	r30, 0x37	; 55
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	48 2f       	mov	r20, r24
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 2e       	mov	r0, r18
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <DIO_u8SetPinDirection+0x1a0>
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	0a 94       	dec	r0
    1cf8:	e2 f7       	brpl	.-8      	; 0x1cf2 <DIO_u8SetPinDirection+0x19c>
    1cfa:	80 95       	com	r24
    1cfc:	84 23       	and	r24, r20
    1cfe:	8c 93       	st	X, r24
    1d00:	32 c0       	rjmp	.+100    	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1d02:	a4 e3       	ldi	r26, 0x34	; 52
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	e4 e3       	ldi	r30, 0x34	; 52
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	48 2f       	mov	r20, r24
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	28 2f       	mov	r18, r24
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	02 2e       	mov	r0, r18
    1d1a:	02 c0       	rjmp	.+4      	; 0x1d20 <DIO_u8SetPinDirection+0x1ca>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	0a 94       	dec	r0
    1d22:	e2 f7       	brpl	.-8      	; 0x1d1c <DIO_u8SetPinDirection+0x1c6>
    1d24:	80 95       	com	r24
    1d26:	84 23       	and	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	1d c0       	rjmp	.+58     	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1d2c:	a1 e3       	ldi	r26, 0x31	; 49
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e1 e3       	ldi	r30, 0x31	; 49
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_u8SetPinDirection+0x1f4>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_u8SetPinDirection+0x1f0>
    1d4e:	80 95       	com	r24
    1d50:	84 23       	and	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	08 c0       	rjmp	.+16     	; 0x1d66 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	05 c0       	rjmp	.+10     	; 0x1d66 <DIO_u8SetPinDirection+0x210>

			}
		}
		else
		{
			Local_u8Error_Sate=1 ;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	89 83       	std	Y+1, r24	; 0x01
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8Error_Sate=1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_Sate;
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d68:	28 96       	adiw	r28, 0x08	; 8
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	08 95       	ret

00001d7a <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1d7a:	df 93       	push	r29
    1d7c:	cf 93       	push	r28
    1d7e:	00 d0       	rcall	.+0      	; 0x1d80 <DIO_u8SetPortDirection+0x6>
    1d80:	00 d0       	rcall	.+0      	; 0x1d82 <DIO_u8SetPortDirection+0x8>
    1d82:	0f 92       	push	r0
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	8a 83       	std	Y+2, r24	; 0x02
    1d8a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    1d8c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	3d 83       	std	Y+5, r19	; 0x05
    1d96:	2c 83       	std	Y+4, r18	; 0x04
    1d98:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	91 05       	cpc	r25, r1
    1da0:	d1 f0       	breq	.+52     	; 0x1dd6 <DIO_u8SetPortDirection+0x5c>
    1da2:	2c 81       	ldd	r18, Y+4	; 0x04
    1da4:	3d 81       	ldd	r19, Y+5	; 0x05
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <DIO_u8SetPortDirection+0x3c>
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	9d 81       	ldd	r25, Y+5	; 0x05
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	61 f0       	breq	.+24     	; 0x1dcc <DIO_u8SetPortDirection+0x52>
    1db4:	1f c0       	rjmp	.+62     	; 0x1df4 <DIO_u8SetPortDirection+0x7a>
    1db6:	2c 81       	ldd	r18, Y+4	; 0x04
    1db8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	81 f0       	breq	.+32     	; 0x1de0 <DIO_u8SetPortDirection+0x66>
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	81 f0       	breq	.+32     	; 0x1dea <DIO_u8SetPortDirection+0x70>
    1dca:	14 c0       	rjmp	.+40     	; 0x1df4 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8_PORTA : DDRA =Copy_u8Direction; break;
    1dcc:	ea e3       	ldi	r30, 0x3A	; 58
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	80 83       	st	Z, r24
    1dd4:	11 c0       	rjmp	.+34     	; 0x1df8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB : DDRB =Copy_u8Direction; break;
    1dd6:	e7 e3       	ldi	r30, 0x37	; 55
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	80 83       	st	Z, r24
    1dde:	0c c0       	rjmp	.+24     	; 0x1df8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC : DDRC =Copy_u8Direction; break;
    1de0:	e4 e3       	ldi	r30, 0x34	; 52
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	80 83       	st	Z, r24
    1de8:	07 c0       	rjmp	.+14     	; 0x1df8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD : DDRD =Copy_u8Direction; break;
    1dea:	e1 e3       	ldi	r30, 0x31	; 49
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	80 83       	st	Z, r24
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_u8SetPortDirection+0x7e>
	default :Local_u8_ErrorState=1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01

}
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <DIO_u8SetPinValue>:



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
    1e12:	28 97       	sbiw	r28, 0x08	; 8
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	f8 94       	cli
    1e18:	de bf       	out	0x3e, r29	; 62
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	cd bf       	out	0x3d, r28	; 61
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    1e20:	6b 83       	std	Y+3, r22	; 0x03
    1e22:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    1e24:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	88 30       	cpi	r24, 0x08	; 8
    1e2a:	08 f0       	brcs	.+2      	; 0x1e2e <DIO_u8SetPinValue+0x24>
    1e2c:	f4 c0       	rjmp	.+488    	; 0x2016 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value ==DIO_u8_PIN_HIGH)
    1e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <DIO_u8SetPinValue+0x2c>
    1e34:	72 c0       	rjmp	.+228    	; 0x1f1a <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	38 87       	std	Y+8, r19	; 0x08
    1e3e:	2f 83       	std	Y+7, r18	; 0x07
    1e40:	8f 81       	ldd	r24, Y+7	; 0x07
    1e42:	98 85       	ldd	r25, Y+8	; 0x08
    1e44:	81 30       	cpi	r24, 0x01	; 1
    1e46:	91 05       	cpc	r25, r1
    1e48:	49 f1       	breq	.+82     	; 0x1e9c <DIO_u8SetPinValue+0x92>
    1e4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1e4c:	38 85       	ldd	r19, Y+8	; 0x08
    1e4e:	22 30       	cpi	r18, 0x02	; 2
    1e50:	31 05       	cpc	r19, r1
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <DIO_u8SetPinValue+0x54>
    1e54:	8f 81       	ldd	r24, Y+7	; 0x07
    1e56:	98 85       	ldd	r25, Y+8	; 0x08
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	61 f0       	breq	.+24     	; 0x1e74 <DIO_u8SetPinValue+0x6a>
    1e5c:	5b c0       	rjmp	.+182    	; 0x1f14 <DIO_u8SetPinValue+0x10a>
    1e5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e60:	38 85       	ldd	r19, Y+8	; 0x08
    1e62:	22 30       	cpi	r18, 0x02	; 2
    1e64:	31 05       	cpc	r19, r1
    1e66:	71 f1       	breq	.+92     	; 0x1ec4 <DIO_u8SetPinValue+0xba>
    1e68:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6a:	98 85       	ldd	r25, Y+8	; 0x08
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	e9 f1       	breq	.+122    	; 0x1eec <DIO_u8SetPinValue+0xe2>
    1e72:	50 c0       	rjmp	.+160    	; 0x1f14 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8_PORTA :SET_BIT(PORTA,Copy_u8Pin); break;
    1e74:	ab e3       	ldi	r26, 0x3B	; 59
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	eb e3       	ldi	r30, 0x3B	; 59
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8SetPinValue+0x88>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_u8SetPinValue+0x84>
    1e96:	84 2b       	or	r24, r20
    1e98:	8c 93       	st	X, r24
    1e9a:	bf c0       	rjmp	.+382    	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :SET_BIT(PORTB,Copy_u8Pin); break;
    1e9c:	a8 e3       	ldi	r26, 0x38	; 56
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e8 e3       	ldi	r30, 0x38	; 56
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_u8SetPinValue+0xb0>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <DIO_u8SetPinValue+0xac>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	ab c0       	rjmp	.+342    	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :SET_BIT(PORTC,Copy_u8Pin); break;
    1ec4:	a5 e3       	ldi	r26, 0x35	; 53
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e5 e3       	ldi	r30, 0x35	; 53
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_u8SetPinValue+0xd8>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_u8SetPinValue+0xd4>
    1ee6:	84 2b       	or	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	97 c0       	rjmp	.+302    	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :SET_BIT(PORTD,Copy_u8Pin); break;
    1eec:	a2 e3       	ldi	r26, 0x32	; 50
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e2 e3       	ldi	r30, 0x32	; 50
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_u8SetPinValue+0x100>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_u8SetPinValue+0xfc>
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	83 c0       	rjmp	.+262    	; 0x201a <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	80 c0       	rjmp	.+256    	; 0x201a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value ==DIO_u8_PIN_LOW)
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <DIO_u8SetPinValue+0x118>
    1f20:	77 c0       	rjmp	.+238    	; 0x2010 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	3e 83       	std	Y+6, r19	; 0x06
    1f2a:	2d 83       	std	Y+5, r18	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	91 05       	cpc	r25, r1
    1f34:	59 f1       	breq	.+86     	; 0x1f8c <DIO_u8SetPinValue+0x182>
    1f36:	2d 81       	ldd	r18, Y+5	; 0x05
    1f38:	3e 81       	ldd	r19, Y+6	; 0x06
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	2c f4       	brge	.+10     	; 0x1f4a <DIO_u8SetPinValue+0x140>
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	00 97       	sbiw	r24, 0x00	; 0
    1f46:	69 f0       	breq	.+26     	; 0x1f62 <DIO_u8SetPinValue+0x158>
    1f48:	60 c0       	rjmp	.+192    	; 0x200a <DIO_u8SetPinValue+0x200>
    1f4a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f4c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f4e:	22 30       	cpi	r18, 0x02	; 2
    1f50:	31 05       	cpc	r19, r1
    1f52:	89 f1       	breq	.+98     	; 0x1fb6 <DIO_u8SetPinValue+0x1ac>
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <DIO_u8SetPinValue+0x156>
    1f5e:	40 c0       	rjmp	.+128    	; 0x1fe0 <DIO_u8SetPinValue+0x1d6>
    1f60:	54 c0       	rjmp	.+168    	; 0x200a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8_PORTA :CLR_BIT(PORTA,Copy_u8Pin); break;
    1f62:	ab e3       	ldi	r26, 0x3B	; 59
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	eb e3       	ldi	r30, 0x3B	; 59
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	81 e0       	ldi	r24, 0x01	; 1
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	02 2e       	mov	r0, r18
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <DIO_u8SetPinValue+0x176>
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	0a 94       	dec	r0
    1f82:	e2 f7       	brpl	.-8      	; 0x1f7c <DIO_u8SetPinValue+0x172>
    1f84:	80 95       	com	r24
    1f86:	84 23       	and	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	47 c0       	rjmp	.+142    	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :CLR_BIT(PORTB,Copy_u8Pin); break;
    1f8c:	a8 e3       	ldi	r26, 0x38	; 56
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e8 e3       	ldi	r30, 0x38	; 56
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <DIO_u8SetPinValue+0x1a0>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <DIO_u8SetPinValue+0x19c>
    1fae:	80 95       	com	r24
    1fb0:	84 23       	and	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	32 c0       	rjmp	.+100    	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :CLR_BIT(PORTC,Copy_u8Pin); break;
    1fb6:	a5 e3       	ldi	r26, 0x35	; 53
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	e5 e3       	ldi	r30, 0x35	; 53
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	80 81       	ld	r24, Z
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	28 2f       	mov	r18, r24
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	02 2e       	mov	r0, r18
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <DIO_u8SetPinValue+0x1ca>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <DIO_u8SetPinValue+0x1c6>
    1fd8:	80 95       	com	r24
    1fda:	84 23       	and	r24, r20
    1fdc:	8c 93       	st	X, r24
    1fde:	1d c0       	rjmp	.+58     	; 0x201a <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :CLR_BIT(PORTD,Copy_u8Pin); break;
    1fe0:	a2 e3       	ldi	r26, 0x32	; 50
    1fe2:	b0 e0       	ldi	r27, 0x00	; 0
    1fe4:	e2 e3       	ldi	r30, 0x32	; 50
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	48 2f       	mov	r20, r24
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	02 2e       	mov	r0, r18
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <DIO_u8SetPinValue+0x1f4>
    1ffa:	88 0f       	add	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	0a 94       	dec	r0
    2000:	e2 f7       	brpl	.-8      	; 0x1ffa <DIO_u8SetPinValue+0x1f0>
    2002:	80 95       	com	r24
    2004:	84 23       	and	r24, r20
    2006:	8c 93       	st	X, r24
    2008:	08 c0       	rjmp	.+16     	; 0x201a <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	05 c0       	rjmp	.+10     	; 0x201a <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8_ErrorState=1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8_ErrorState;
    201a:	89 81       	ldd	r24, Y+1	; 0x01

}
    201c:	28 96       	adiw	r28, 0x08	; 8
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	cf 91       	pop	r28
    202a:	df 91       	pop	r29
    202c:	08 95       	ret

0000202e <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    202e:	df 93       	push	r29
    2030:	cf 93       	push	r28
    2032:	00 d0       	rcall	.+0      	; 0x2034 <DIO_u8SetPortValue+0x6>
    2034:	00 d0       	rcall	.+0      	; 0x2036 <DIO_u8SetPortValue+0x8>
    2036:	0f 92       	push	r0
    2038:	cd b7       	in	r28, 0x3d	; 61
    203a:	de b7       	in	r29, 0x3e	; 62
    203c:	8a 83       	std	Y+2, r24	; 0x02
    203e:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    2040:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	3d 83       	std	Y+5, r19	; 0x05
    204a:	2c 83       	std	Y+4, r18	; 0x04
    204c:	8c 81       	ldd	r24, Y+4	; 0x04
    204e:	9d 81       	ldd	r25, Y+5	; 0x05
    2050:	81 30       	cpi	r24, 0x01	; 1
    2052:	91 05       	cpc	r25, r1
    2054:	d1 f0       	breq	.+52     	; 0x208a <DIO_u8SetPortValue+0x5c>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <DIO_u8SetPortValue+0x3c>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	61 f0       	breq	.+24     	; 0x2080 <DIO_u8SetPortValue+0x52>
    2068:	1f c0       	rjmp	.+62     	; 0x20a8 <DIO_u8SetPortValue+0x7a>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	81 f0       	breq	.+32     	; 0x2094 <DIO_u8SetPortValue+0x66>
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	83 30       	cpi	r24, 0x03	; 3
    207a:	91 05       	cpc	r25, r1
    207c:	81 f0       	breq	.+32     	; 0x209e <DIO_u8SetPortValue+0x70>
    207e:	14 c0       	rjmp	.+40     	; 0x20a8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8_PORTA : PORTA =Copy_u8Value; break;
    2080:	eb e3       	ldi	r30, 0x3B	; 59
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	80 83       	st	Z, r24
    2088:	11 c0       	rjmp	.+34     	; 0x20ac <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB : PORTB =Copy_u8Value; break;
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	80 83       	st	Z, r24
    2092:	0c c0       	rjmp	.+24     	; 0x20ac <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC : PORTC =Copy_u8Value; break;
    2094:	e5 e3       	ldi	r30, 0x35	; 53
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	80 83       	st	Z, r24
    209c:	07 c0       	rjmp	.+14     	; 0x20ac <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD : PORTD =Copy_u8Value; break;
    209e:	e2 e3       	ldi	r30, 0x32	; 50
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	80 83       	st	Z, r24
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_u8SetPortValue+0x7e>
	default :Local_u8_ErrorState=1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    20ac:	89 81       	ldd	r24, Y+1	; 0x01



}
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 *Copy_Pu8Vlaue)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	27 97       	sbiw	r28, 0x07	; 7
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	8a 83       	std	Y+2, r24	; 0x02
    20d4:	6b 83       	std	Y+3, r22	; 0x03
    20d6:	5d 83       	std	Y+5, r21	; 0x05
    20d8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    20da:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Vlaue != NULL)&&(Copy_u8Pin <=DIO_u8_PIN7))
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	09 f4       	brne	.+2      	; 0x20e6 <DIO_u8GetPinValue+0x28>
    20e4:	78 c0       	rjmp	.+240    	; 0x21d6 <DIO_u8GetPinValue+0x118>
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	88 30       	cpi	r24, 0x08	; 8
    20ea:	08 f0       	brcs	.+2      	; 0x20ee <DIO_u8GetPinValue+0x30>
    20ec:	74 c0       	rjmp	.+232    	; 0x21d6 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	3f 83       	std	Y+7, r19	; 0x07
    20f6:	2e 83       	std	Y+6, r18	; 0x06
    20f8:	4e 81       	ldd	r20, Y+6	; 0x06
    20fa:	5f 81       	ldd	r21, Y+7	; 0x07
    20fc:	41 30       	cpi	r20, 0x01	; 1
    20fe:	51 05       	cpc	r21, r1
    2100:	59 f1       	breq	.+86     	; 0x2158 <DIO_u8GetPinValue+0x9a>
    2102:	8e 81       	ldd	r24, Y+6	; 0x06
    2104:	9f 81       	ldd	r25, Y+7	; 0x07
    2106:	82 30       	cpi	r24, 0x02	; 2
    2108:	91 05       	cpc	r25, r1
    210a:	34 f4       	brge	.+12     	; 0x2118 <DIO_u8GetPinValue+0x5a>
    210c:	2e 81       	ldd	r18, Y+6	; 0x06
    210e:	3f 81       	ldd	r19, Y+7	; 0x07
    2110:	21 15       	cp	r18, r1
    2112:	31 05       	cpc	r19, r1
    2114:	69 f0       	breq	.+26     	; 0x2130 <DIO_u8GetPinValue+0x72>
    2116:	5c c0       	rjmp	.+184    	; 0x21d0 <DIO_u8GetPinValue+0x112>
    2118:	4e 81       	ldd	r20, Y+6	; 0x06
    211a:	5f 81       	ldd	r21, Y+7	; 0x07
    211c:	42 30       	cpi	r20, 0x02	; 2
    211e:	51 05       	cpc	r21, r1
    2120:	79 f1       	breq	.+94     	; 0x2180 <DIO_u8GetPinValue+0xc2>
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	83 30       	cpi	r24, 0x03	; 3
    2128:	91 05       	cpc	r25, r1
    212a:	09 f4       	brne	.+2      	; 0x212e <DIO_u8GetPinValue+0x70>
    212c:	3d c0       	rjmp	.+122    	; 0x21a8 <DIO_u8GetPinValue+0xea>
    212e:	50 c0       	rjmp	.+160    	; 0x21d0 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8_PORTA : *Copy_Pu8Vlaue =GET_BIT(PINA , Copy_u8Pin); break;
    2130:	e9 e3       	ldi	r30, 0x39	; 57
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	28 2f       	mov	r18, r24
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	88 2f       	mov	r24, r24
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a9 01       	movw	r20, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <DIO_u8GetPinValue+0x8a>
    2144:	55 95       	asr	r21
    2146:	47 95       	ror	r20
    2148:	8a 95       	dec	r24
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <DIO_u8GetPinValue+0x86>
    214c:	ca 01       	movw	r24, r20
    214e:	81 70       	andi	r24, 0x01	; 1
    2150:	ec 81       	ldd	r30, Y+4	; 0x04
    2152:	fd 81       	ldd	r31, Y+5	; 0x05
    2154:	80 83       	st	Z, r24
    2156:	41 c0       	rjmp	.+130    	; 0x21da <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTB : *Copy_Pu8Vlaue =GET_BIT(PINB , Copy_u8Pin); break;
    2158:	e6 e3       	ldi	r30, 0x36	; 54
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	a9 01       	movw	r20, r18
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <DIO_u8GetPinValue+0xb2>
    216c:	55 95       	asr	r21
    216e:	47 95       	ror	r20
    2170:	8a 95       	dec	r24
    2172:	e2 f7       	brpl	.-8      	; 0x216c <DIO_u8GetPinValue+0xae>
    2174:	ca 01       	movw	r24, r20
    2176:	81 70       	andi	r24, 0x01	; 1
    2178:	ec 81       	ldd	r30, Y+4	; 0x04
    217a:	fd 81       	ldd	r31, Y+5	; 0x05
    217c:	80 83       	st	Z, r24
    217e:	2d c0       	rjmp	.+90     	; 0x21da <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTC : *Copy_Pu8Vlaue =GET_BIT(PINC , Copy_u8Pin); break;
    2180:	e3 e3       	ldi	r30, 0x33	; 51
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a9 01       	movw	r20, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8GetPinValue+0xda>
    2194:	55 95       	asr	r21
    2196:	47 95       	ror	r20
    2198:	8a 95       	dec	r24
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8GetPinValue+0xd6>
    219c:	ca 01       	movw	r24, r20
    219e:	81 70       	andi	r24, 0x01	; 1
    21a0:	ec 81       	ldd	r30, Y+4	; 0x04
    21a2:	fd 81       	ldd	r31, Y+5	; 0x05
    21a4:	80 83       	st	Z, r24
    21a6:	19 c0       	rjmp	.+50     	; 0x21da <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTD : *Copy_Pu8Vlaue =GET_BIT(PIND , Copy_u8Pin); break;
    21a8:	e0 e3       	ldi	r30, 0x30	; 48
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_u8GetPinValue+0x102>
    21bc:	55 95       	asr	r21
    21be:	47 95       	ror	r20
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_u8GetPinValue+0xfe>
    21c4:	ca 01       	movw	r24, r20
    21c6:	81 70       	andi	r24, 0x01	; 1
    21c8:	ec 81       	ldd	r30, Y+4	; 0x04
    21ca:	fd 81       	ldd	r31, Y+5	; 0x05
    21cc:	80 83       	st	Z, r24
    21ce:	05 c0       	rjmp	.+10     	; 0x21da <DIO_u8GetPinValue+0x11c>
		default :Local_u8_ErrorState=1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	02 c0       	rjmp	.+4      	; 0x21da <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8_ErrorState;
    21da:	89 81       	ldd	r24, Y+1	; 0x01

}
    21dc:	27 96       	adiw	r28, 0x07	; 7
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	08 95       	ret

000021ee <ADC_voidInit>:
u16 ADC_u16DigitalValue=0;
u8 ADC_u8BusyState = NOTBUSY;


void ADC_voidInit(void)
{
    21ee:	df 93       	push	r29
    21f0:	cf 93       	push	r28
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(ADMUX,ADMUX_REFS1);
	CLR_BIT(ADMUX,ADMUX_REFS0);

#elif ADC_REFERENCE_VOLT ==AVCC
	CLR_BIT(ADMUX,ADMUX_REFS1);
    21f6:	a7 e2       	ldi	r26, 0x27	; 39
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e7 e2       	ldi	r30, 0x27	; 39
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	8f 77       	andi	r24, 0x7F	; 127
    2202:	8c 93       	st	X, r24
	SET_BIT(ADMUX,ADMUX_REFS0);
    2204:	a7 e2       	ldi	r26, 0x27	; 39
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e7 e2       	ldi	r30, 0x27	; 39
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	80 64       	ori	r24, 0x40	; 64
    2210:	8c 93       	st	X, r24
#endif


	/*	Set Resolution */
#if  Resolution == Eight_bits
	SET_BIT(ADMUX,ADMUX_ADLAR);
    2212:	a7 e2       	ldi	r26, 0x27	; 39
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e7 e2       	ldi	r30, 0x27	; 39
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	80 62       	ori	r24, 0x20	; 32
    221e:	8c 93       	st	X, r24
	ADCSRA |= factor_32 ;
#elif Prescaler_Factor == factor_64
	ADCSRA &=0b11111000;
	ADCSRA |= factor_64 ;
#elif Prescaler_Factor == factor_128
	ADCSRA &=0b11111000;
    2220:	a6 e2       	ldi	r26, 0x26	; 38
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e6 e2       	ldi	r30, 0x26	; 38
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	88 7f       	andi	r24, 0xF8	; 248
    222c:	8c 93       	st	X, r24
	ADCSRA |=  (factor_128 &(0x07)) ;
    222e:	a6 e2       	ldi	r26, 0x26	; 38
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e6 e2       	ldi	r30, 0x26	; 38
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	87 60       	ori	r24, 0x07	; 7
    223a:	8c 93       	st	X, r24
#error "choose the correct option"
#endif

	/* check ADC_Status enabled or disabled */
#if ADC_Status == Enabled
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    223c:	a6 e2       	ldi	r26, 0x26	; 38
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e6 e2       	ldi	r30, 0x26	; 38
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	80 68       	ori	r24, 0x80	; 128
    2248:	8c 93       	st	X, r24

	// ADC Polling
	//CLR_BIT(ADCSRA, ADCSRA_ADIE);


}
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <ADC_u16StartConversionSynchronous>:


u16 ADC_u16StartConversionSynchronous(u8 copy_u8Channel)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	00 d0       	rcall	.+0      	; 0x2256 <ADC_u16StartConversionSynchronous+0x6>
    2256:	0f 92       	push	r0
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    225c:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == BUSY)
    225e:	80 91 6c 01 	lds	r24, 0x016C
    2262:	81 30       	cpi	r24, 0x01	; 1
    2264:	19 f4       	brne	.+6      	; 0x226c <ADC_u16StartConversionSynchronous+0x1c>
	{
		return 0;
    2266:	1b 82       	std	Y+3, r1	; 0x03
    2268:	1a 82       	std	Y+2, r1	; 0x02
    226a:	36 c0       	rjmp	.+108    	; 0x22d8 <ADC_u16StartConversionSynchronous+0x88>
	}
	else
	{
		ADC_u8BusyState = BUSY;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 6c 01 	sts	0x016C, r24

		/*clear the mux bits in ADMUX Register*/
		ADMUX &=0b11100000;
    2272:	a7 e2       	ldi	r26, 0x27	; 39
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e7 e2       	ldi	r30, 0x27	; 39
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	80 7e       	andi	r24, 0xE0	; 224
    227e:	8c 93       	st	X, r24
		/*set required channel into the Mux bits */
		ADMUX|= (copy_u8Channel & 0x1f);
    2280:	a7 e2       	ldi	r26, 0x27	; 39
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e7 e2       	ldi	r30, 0x27	; 39
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	98 2f       	mov	r25, r24
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	8f 71       	andi	r24, 0x1F	; 31
    2290:	89 2b       	or	r24, r25
    2292:	8c 93       	st	X, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    2294:	a6 e2       	ldi	r26, 0x26	; 38
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e6 e2       	ldi	r30, 0x26	; 38
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 64       	ori	r24, 0x40	; 64
    22a0:	8c 93       	st	X, r24
		/*Polling (busy waiting) until the conversion complete flag is set*/
		while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
    22a2:	e6 e2       	ldi	r30, 0x26	; 38
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	82 95       	swap	r24
    22aa:	8f 70       	andi	r24, 0x0F	; 15
    22ac:	88 2f       	mov	r24, r24
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	81 70       	andi	r24, 0x01	; 1
    22b2:	90 70       	andi	r25, 0x00	; 0
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	a9 f3       	breq	.-22     	; 0x22a2 <ADC_u16StartConversionSynchronous+0x52>

		/*Clear conversion complete flag */
		SET_BIT(ADCSRA,ADCSRA_ADIF);
    22b8:	a6 e2       	ldi	r26, 0x26	; 38
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	e6 e2       	ldi	r30, 0x26	; 38
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	80 61       	ori	r24, 0x10	; 16
    22c4:	8c 93       	st	X, r24
		ADC_u8BusyState = NOTBUSY;
    22c6:	10 92 6c 01 	sts	0x016C, r1

#if  Resolution == Eight_bits
		/*return reading*/
		return ADCH;
    22ca:	e5 e2       	ldi	r30, 0x25	; 37
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	3b 83       	std	Y+3, r19	; 0x03
    22d6:	2a 83       	std	Y+2, r18	; 0x02
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
#else
#error "choose the correct option"
#endif

	}
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <ADC_u16StartConversionAsynchronous>:

u16 ADC_u16StartConversionAsynchronous(u8 copy_u8Channel,  void (*Copy_pvCallBackFunction)(void))
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <ADC_u16StartConversionAsynchronous+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <ADC_u16StartConversionAsynchronous+0x8>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	7b 83       	std	Y+3, r23	; 0x03
    22fa:	6a 83       	std	Y+2, r22	; 0x02
	if(ADC_u8BusyState == BUSY)
    22fc:	80 91 6c 01 	lds	r24, 0x016C
    2300:	81 30       	cpi	r24, 0x01	; 1
    2302:	29 f4       	brne	.+10     	; 0x230e <ADC_u16StartConversionAsynchronous+0x26>
	{
		return 1;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	9d 83       	std	Y+5, r25	; 0x05
    230a:	8c 83       	std	Y+4, r24	; 0x04
    230c:	2a c0       	rjmp	.+84     	; 0x2362 <ADC_u16StartConversionAsynchronous+0x7a>

	}
	else
	{
		ADC_u8BusyState = BUSY;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	80 93 6c 01 	sts	0x016C, r24
		/*clear the mux bits in ADMUX Register*/
		ADMUX &=0b11100000;
    2314:	a7 e2       	ldi	r26, 0x27	; 39
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e7 e2       	ldi	r30, 0x27	; 39
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 7e       	andi	r24, 0xE0	; 224
    2320:	8c 93       	st	X, r24
		/*set required channel into the Mux bits */
		ADMUX|= (copy_u8Channel & 0x1f);
    2322:	a7 e2       	ldi	r26, 0x27	; 39
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e7 e2       	ldi	r30, 0x27	; 39
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	98 2f       	mov	r25, r24
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	8f 71       	andi	r24, 0x1F	; 31
    2332:	89 2b       	or	r24, r25
    2334:	8c 93       	st	X, r24
		/*Set The CallBack Function*/
		Global_pvNotificationFunction = Copy_pvCallBackFunction;
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	9b 81       	ldd	r25, Y+3	; 0x03
    233a:	90 93 69 01 	sts	0x0169, r25
    233e:	80 93 68 01 	sts	0x0168, r24
		/*ADC Interrupt Enable*/
		SET_BIT(ADCSRA, ADCSRA_ADIE);
    2342:	a6 e2       	ldi	r26, 0x26	; 38
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e6 e2       	ldi	r30, 0x26	; 38
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	88 60       	ori	r24, 0x08	; 8
    234e:	8c 93       	st	X, r24
		/*Start The Conversion*/
		SET_BIT(ADCSRA,ADCSRA_ADSC);
    2350:	a6 e2       	ldi	r26, 0x26	; 38
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e6 e2       	ldi	r30, 0x26	; 38
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	8c 93       	st	X, r24

		return 0;
    235e:	1d 82       	std	Y+5, r1	; 0x05
    2360:	1c 82       	std	Y+4, r1	; 0x04
    2362:	8c 81       	ldd	r24, Y+4	; 0x04
    2364:	9d 81       	ldd	r25, Y+5	; 0x05

	}

}
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <__vector_16>:


void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    2376:	1f 92       	push	r1
    2378:	0f 92       	push	r0
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	0f 92       	push	r0
    237e:	11 24       	eor	r1, r1
    2380:	2f 93       	push	r18
    2382:	3f 93       	push	r19
    2384:	4f 93       	push	r20
    2386:	5f 93       	push	r21
    2388:	6f 93       	push	r22
    238a:	7f 93       	push	r23
    238c:	8f 93       	push	r24
    238e:	9f 93       	push	r25
    2390:	af 93       	push	r26
    2392:	bf 93       	push	r27
    2394:	ef 93       	push	r30
    2396:	ff 93       	push	r31
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62

	/*Check if the Global Pointer To Function points to NULL*/
	if(Global_pvNotificationFunction != NULL)
    23a0:	80 91 68 01 	lds	r24, 0x0168
    23a4:	90 91 69 01 	lds	r25, 0x0169
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	b9 f0       	breq	.+46     	; 0x23da <__vector_16+0x64>
	{
		/*Read The Result*/
		ADC_u16DigitalValue= ADCH;
    23ac:	e5 e2       	ldi	r30, 0x25	; 37
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	90 93 6b 01 	sts	0x016B, r25
    23ba:	80 93 6a 01 	sts	0x016A, r24
		/*invoke the call back function*/
		Global_pvNotificationFunction();
    23be:	e0 91 68 01 	lds	r30, 0x0168
    23c2:	f0 91 69 01 	lds	r31, 0x0169
    23c6:	09 95       	icall
		/*Set ADC To Be Not Busy*/
		ADC_u8BusyState = NOTBUSY;
    23c8:	10 92 6c 01 	sts	0x016C, r1
		/*Disable ADC Interrupt*/
		CLR_BIT(ADCSRA, ADCSRA_ADIE);
    23cc:	a6 e2       	ldi	r26, 0x26	; 38
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e6 e2       	ldi	r30, 0x26	; 38
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	87 7f       	andi	r24, 0xF7	; 247
    23d8:	8c 93       	st	X, r24
	else
	{
		/*Do Nothing*/
	}

}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	7f 91       	pop	r23
    23ec:	6f 91       	pop	r22
    23ee:	5f 91       	pop	r21
    23f0:	4f 91       	pop	r20
    23f2:	3f 91       	pop	r19
    23f4:	2f 91       	pop	r18
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f 90       	pop	r0
    23fc:	1f 90       	pop	r1
    23fe:	18 95       	reti

00002400 <ADC_GetVolt_Synchronous>:

u16 ADC_GetVolt_Synchronous (u8 copy_u8Channel)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <ADC_GetVolt_Synchronous+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <ADC_GetVolt_Synchronous+0x8>
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8d 83       	std	Y+5, r24	; 0x05
	u32 digital = ADC_u16StartConversionSynchronous(copy_u8Channel);
    2410:	8d 81       	ldd	r24, Y+5	; 0x05
    2412:	0e 94 28 11 	call	0x2250	; 0x2250 <ADC_u16StartConversionSynchronous>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03

	u16 volt=(u16)(((u32)digital*5000UL)/256UL);;
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	cc 01       	movw	r24, r24
    2420:	a0 e0       	ldi	r26, 0x00	; 0
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	28 e8       	ldi	r18, 0x88	; 136
    2426:	33 e1       	ldi	r19, 0x13	; 19
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	bc 01       	movw	r22, r24
    242e:	cd 01       	movw	r24, r26
    2430:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__mulsi3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	89 2f       	mov	r24, r25
    243a:	9a 2f       	mov	r25, r26
    243c:	ab 2f       	mov	r26, r27
    243e:	bb 27       	eor	r27, r27
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
	return volt;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <ADC_GetVolt>:


u16 ADC_GetVolt (void)
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	00 d0       	rcall	.+0      	; 0x245e <ADC_GetVolt+0x6>
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62

	u16 volt=(u16)(((u32)ADC_u16DigitalValue*5000UL)/256UL);;
    2462:	80 91 6a 01 	lds	r24, 0x016A
    2466:	90 91 6b 01 	lds	r25, 0x016B
    246a:	cc 01       	movw	r24, r24
    246c:	a0 e0       	ldi	r26, 0x00	; 0
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	28 e8       	ldi	r18, 0x88	; 136
    2472:	33 e1       	ldi	r19, 0x13	; 19
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <__mulsi3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	89 2f       	mov	r24, r25
    2486:	9a 2f       	mov	r25, r26
    2488:	ab 2f       	mov	r26, r27
    248a:	bb 27       	eor	r27, r27
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
	return volt;
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <Servo_Init>:




void Servo_Init(void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	Timer1_Init(TIMER1_FASTPWM_OCRA_TOP_MODE , TIMER1_SCALER_8);
    24a6:	84 e0       	ldi	r24, 0x04	; 4
    24a8:	62 e0       	ldi	r22, 0x02	; 2
    24aa:	0e 94 72 07 	call	0xee4	; 0xee4 <Timer1_Init>
	Timer1_OCRB1Mode(OCRB_NON_INVERTING);
    24ae:	82 e0       	ldi	r24, 0x02	; 2
    24b0:	0e 94 ae 08 	call	0x115c	; 0x115c <Timer1_OCRB1Mode>
	TIMER1_PreloadOCR1A(19999);
    24b4:	8f e1       	ldi	r24, 0x1F	; 31
    24b6:	9e e4       	ldi	r25, 0x4E	; 78
    24b8:	0e 94 c1 09 	call	0x1382	; 0x1382 <TIMER1_PreloadOCR1A>
	TIMER1_PreloadOCR1B(999);
    24bc:	87 ee       	ldi	r24, 0xE7	; 231
    24be:	93 e0       	ldi	r25, 0x03	; 3
    24c0:	0e 94 af 09 	call	0x135e	; 0x135e <TIMER1_PreloadOCR1B>
}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <Servo_SetAngle>:

void Servo_SetAngle(u8 angle)
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <Servo_SetAngle+0x6>
    24d0:	0f 92       	push	r0
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	8b 83       	std	Y+3, r24	; 0x03
//	u16 OCR_value=(((u32)angle*1000)/180)+999;
//	u16 OCR_value=(((u32)angle*3500)/180)+999;
	u16 OCR_value=(((u32)angle+44)*100)/9;
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	84 e6       	ldi	r24, 0x64	; 100
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	ac 01       	movw	r20, r24
    24e4:	24 9f       	mul	r18, r20
    24e6:	c0 01       	movw	r24, r0
    24e8:	25 9f       	mul	r18, r21
    24ea:	90 0d       	add	r25, r0
    24ec:	34 9f       	mul	r19, r20
    24ee:	90 0d       	add	r25, r0
    24f0:	11 24       	eor	r1, r1
    24f2:	80 5d       	subi	r24, 0xD0	; 208
    24f4:	9e 4e       	sbci	r25, 0xEE	; 238
    24f6:	29 e0       	ldi	r18, 0x09	; 9
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	b9 01       	movw	r22, r18
    24fc:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    2500:	cb 01       	movw	r24, r22
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01

	TIMER1_PreloadOCR1B(OCR_value);
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	0e 94 af 09 	call	0x135e	; 0x135e <TIMER1_PreloadOCR1B>
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <ssd_u8Enable>:

u8 number[10]={0b00111111,0b00000110,0b01011011,0b01001111,0b01100110,0b01101101,0b01111101,0b00000111,0b01111111,0b01101111};


u8 ssd_u8Enable(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <ssd_u8Enable+0x6>
    2520:	0f 92       	push	r0
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    252a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin <= DIO_u8_PIN7)
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	88 30       	cpi	r24, 0x08	; 8
    2530:	58 f4       	brcc	.+22     	; 0x2548 <ssd_u8Enable+0x2e>
	{

#if COM_TYPE == CATHOD
		DIO_u8SetPinDirection(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_OUTPUT);
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	6b 81       	ldd	r22, Y+3	; 0x03
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_LOW);
    253c:	8a 81       	ldd	r24, Y+2	; 0x02
    253e:	6b 81       	ldd	r22, Y+3	; 0x03
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    2546:	02 c0       	rjmp	.+4      	; 0x254c <ssd_u8Enable+0x32>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_HIGH);
#endif
	}
	else
	{
		Local_u8_ErrorState=1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    254c:	89 81       	ldd	r24, Y+1	; 0x01
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	08 95       	ret

0000255a <ssd_u8Disable>:


u8 ssd_u8Disable(u8 Copy_u8Port , u8 Copy_u8Pin)
{
    255a:	df 93       	push	r29
    255c:	cf 93       	push	r28
    255e:	00 d0       	rcall	.+0      	; 0x2560 <ssd_u8Disable+0x6>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	8a 83       	std	Y+2, r24	; 0x02
    2568:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    256a:	19 82       	std	Y+1, r1	; 0x01


	if(Copy_u8Pin <= DIO_u8_PIN7)
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	88 30       	cpi	r24, 0x08	; 8
    2570:	30 f4       	brcc	.+12     	; 0x257e <ssd_u8Disable+0x24>
	{
#if COM_TYPE ==CATHOD
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_HIGH);
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	6b 81       	ldd	r22, Y+3	; 0x03
    2576:	41 e0       	ldi	r20, 0x01	; 1
    2578:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <ssd_u8Disable+0x28>
		DIO_u8SetPinValue(Copy_u8Port,Copy_u8Pin,DIO_u8_PIN_LOW);
#endif
	}
	else
	{
		Local_u8_ErrorState=1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    2582:	89 81       	ldd	r24, Y+1	; 0x01

}
    2584:	0f 90       	pop	r0
    2586:	0f 90       	pop	r0
    2588:	0f 90       	pop	r0
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <ssd_u8SendNumber>:


u8 ssd_u8SendNumber(u8 Copy_u8Port,u8 Copy_u8Number)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	00 d0       	rcall	.+0      	; 0x2596 <ssd_u8SendNumber+0x6>
    2596:	00 d0       	rcall	.+0      	; 0x2598 <ssd_u8SendNumber+0x8>
    2598:	0f 92       	push	r0
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	8a 83       	std	Y+2, r24	; 0x02
    25a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState =0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Number <= 9) //number[9]
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	8a 30       	cpi	r24, 0x0A	; 10
    25a8:	08 f0       	brcs	.+2      	; 0x25ac <ssd_u8SendNumber+0x1c>
    25aa:	56 c0       	rjmp	.+172    	; 0x2658 <ssd_u8SendNumber+0xc8>
	{

		DIO_u8SetPortDirection(Copy_u8Port,DIO_u8_PORT_OUTPUT);
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	6f ef       	ldi	r22, 0xFF	; 255
    25b0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <DIO_u8SetPortDirection>

		switch (Copy_u8Port)
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	28 2f       	mov	r18, r24
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	3d 83       	std	Y+5, r19	; 0x05
    25bc:	2c 83       	std	Y+4, r18	; 0x04
    25be:	8c 81       	ldd	r24, Y+4	; 0x04
    25c0:	9d 81       	ldd	r25, Y+5	; 0x05
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	91 05       	cpc	r25, r1
    25c6:	09 f1       	breq	.+66     	; 0x260a <ssd_u8SendNumber+0x7a>
    25c8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ca:	3d 81       	ldd	r19, Y+5	; 0x05
    25cc:	22 30       	cpi	r18, 0x02	; 2
    25ce:	31 05       	cpc	r19, r1
    25d0:	2c f4       	brge	.+10     	; 0x25dc <ssd_u8SendNumber+0x4c>
    25d2:	8c 81       	ldd	r24, Y+4	; 0x04
    25d4:	9d 81       	ldd	r25, Y+5	; 0x05
    25d6:	00 97       	sbiw	r24, 0x00	; 0
    25d8:	61 f0       	breq	.+24     	; 0x25f2 <ssd_u8SendNumber+0x62>
    25da:	3b c0       	rjmp	.+118    	; 0x2652 <ssd_u8SendNumber+0xc2>
    25dc:	2c 81       	ldd	r18, Y+4	; 0x04
    25de:	3d 81       	ldd	r19, Y+5	; 0x05
    25e0:	22 30       	cpi	r18, 0x02	; 2
    25e2:	31 05       	cpc	r19, r1
    25e4:	f1 f0       	breq	.+60     	; 0x2622 <ssd_u8SendNumber+0x92>
    25e6:	8c 81       	ldd	r24, Y+4	; 0x04
    25e8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ea:	83 30       	cpi	r24, 0x03	; 3
    25ec:	91 05       	cpc	r25, r1
    25ee:	29 f1       	breq	.+74     	; 0x263a <ssd_u8SendNumber+0xaa>
    25f0:	30 c0       	rjmp	.+96     	; 0x2652 <ssd_u8SendNumber+0xc2>
		{

#if COM_TYPE ==CATHOD

		case DIO_u8_PORTA :DIO_u8SetPortValue(DIO_u8_PORTA,number[Copy_u8Number]); break;
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	88 2f       	mov	r24, r24
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	fc 01       	movw	r30, r24
    25fa:	ed 5c       	subi	r30, 0xCD	; 205
    25fc:	fe 4f       	sbci	r31, 0xFE	; 254
    25fe:	90 81       	ld	r25, Z
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	69 2f       	mov	r22, r25
    2604:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>
    2608:	29 c0       	rjmp	.+82     	; 0x265c <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTB :DIO_u8SetPortValue(DIO_u8_PORTB,number[Copy_u8Number]); break;
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	88 2f       	mov	r24, r24
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	fc 01       	movw	r30, r24
    2612:	ed 5c       	subi	r30, 0xCD	; 205
    2614:	fe 4f       	sbci	r31, 0xFE	; 254
    2616:	90 81       	ld	r25, Z
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	69 2f       	mov	r22, r25
    261c:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>
    2620:	1d c0       	rjmp	.+58     	; 0x265c <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTC :DIO_u8SetPortValue(DIO_u8_PORTC,number[Copy_u8Number]); break;
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	88 2f       	mov	r24, r24
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	fc 01       	movw	r30, r24
    262a:	ed 5c       	subi	r30, 0xCD	; 205
    262c:	fe 4f       	sbci	r31, 0xFE	; 254
    262e:	90 81       	ld	r25, Z
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	69 2f       	mov	r22, r25
    2634:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>
    2638:	11 c0       	rjmp	.+34     	; 0x265c <ssd_u8SendNumber+0xcc>
		case DIO_u8_PORTD :DIO_u8SetPortValue(DIO_u8_PORTD,number[Copy_u8Number]); break;
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	fc 01       	movw	r30, r24
    2642:	ed 5c       	subi	r30, 0xCD	; 205
    2644:	fe 4f       	sbci	r31, 0xFE	; 254
    2646:	90 81       	ld	r25, Z
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	69 2f       	mov	r22, r25
    264c:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>
    2650:	05 c0       	rjmp	.+10     	; 0x265c <ssd_u8SendNumber+0xcc>
		default : Local_u8_ErrorState=1;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	02 c0       	rjmp	.+4      	; 0x265c <ssd_u8SendNumber+0xcc>
		}

	}
	else
	{
		Local_u8_ErrorState=1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    265c:	89 81       	ldd	r24, Y+1	; 0x01
}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	cf 91       	pop	r28
    266a:	df 91       	pop	r29
    266c:	08 95       	ret

0000266e <ssd_u8SendNumber_Mul>:



u8 ssd_u8SendNumber_Mul(u8 Copy_u8Port,u8 Copy_u8ComPort,u8 Copy_u8Number1, u8 Copy_u8Com1, u8 Copy_u8Number2, u8 Copy_u8Com2)
{
    266e:	ef 92       	push	r14
    2670:	0f 93       	push	r16
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	a3 97       	sbiw	r28, 0x23	; 35
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	8e 8f       	std	Y+30, r24	; 0x1e
    2688:	6f 8f       	std	Y+31, r22	; 0x1f
    268a:	48 a3       	std	Y+32, r20	; 0x20
    268c:	29 a3       	std	Y+33, r18	; 0x21
    268e:	0a a3       	std	Y+34, r16	; 0x22
    2690:	eb a2       	std	Y+35, r14	; 0x23

	u8 Local_u8_ErrorState =0;
    2692:	1d 8e       	std	Y+29, r1	; 0x1d
	if((Copy_u8Number1 <= number[9]) && (Copy_u8Number2 <= number[9]))
    2694:	90 91 3c 01 	lds	r25, 0x013C
    2698:	88 a1       	ldd	r24, Y+32	; 0x20
    269a:	98 17       	cp	r25, r24
    269c:	08 f4       	brcc	.+2      	; 0x26a0 <ssd_u8SendNumber_Mul+0x32>
    269e:	03 c1       	rjmp	.+518    	; 0x28a6 <ssd_u8SendNumber_Mul+0x238>
    26a0:	90 91 3c 01 	lds	r25, 0x013C
    26a4:	8a a1       	ldd	r24, Y+34	; 0x22
    26a6:	98 17       	cp	r25, r24
    26a8:	08 f4       	brcc	.+2      	; 0x26ac <ssd_u8SendNumber_Mul+0x3e>
    26aa:	fd c0       	rjmp	.+506    	; 0x28a6 <ssd_u8SendNumber_Mul+0x238>
	{
		ssd_u8Disable(Copy_u8ComPort,Copy_u8Com2);
    26ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26ae:	6b a1       	ldd	r22, Y+35	; 0x23
    26b0:	0e 94 ad 12 	call	0x255a	; 0x255a <ssd_u8Disable>
		ssd_u8Enable(Copy_u8ComPort,Copy_u8Com1);
    26b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26b6:	69 a1       	ldd	r22, Y+33	; 0x21
    26b8:	0e 94 8d 12 	call	0x251a	; 0x251a <ssd_u8Enable>
		ssd_u8SendNumber(Copy_u8Port,Copy_u8Number1);
    26bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26be:	68 a1       	ldd	r22, Y+32	; 0x20
    26c0:	0e 94 c8 12 	call	0x2590	; 0x2590 <ssd_u8SendNumber>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a8 ec       	ldi	r26, 0xC8	; 200
    26ca:	b2 e4       	ldi	r27, 0x42	; 66
    26cc:	89 8f       	std	Y+25, r24	; 0x19
    26ce:	9a 8f       	std	Y+26, r25	; 0x1a
    26d0:	ab 8f       	std	Y+27, r26	; 0x1b
    26d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	69 8d       	ldd	r22, Y+25	; 0x19
    26d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8d 8b       	std	Y+21, r24	; 0x15
    26ee:	9e 8b       	std	Y+22, r25	; 0x16
    26f0:	af 8b       	std	Y+23, r26	; 0x17
    26f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26f4:	6d 89       	ldd	r22, Y+21	; 0x15
    26f6:	7e 89       	ldd	r23, Y+22	; 0x16
    26f8:	8f 89       	ldd	r24, Y+23	; 0x17
    26fa:	98 8d       	ldd	r25, Y+24	; 0x18
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <ssd_u8SendNumber_Mul+0xa8>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9c 8b       	std	Y+20, r25	; 0x14
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <ssd_u8SendNumber_Mul+0x126>
	else if (__tmp > 65535)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <ssd_u8SendNumber_Mul+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	69 8d       	ldd	r22, Y+25	; 0x19
    2730:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2732:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2734:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9c 8b       	std	Y+20, r25	; 0x14
    2754:	8b 8b       	std	Y+19, r24	; 0x13
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <ssd_u8SendNumber_Mul+0x108>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9a 8b       	std	Y+18, r25	; 0x12
    275e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2760:	89 89       	ldd	r24, Y+17	; 0x11
    2762:	9a 89       	ldd	r25, Y+18	; 0x12
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <ssd_u8SendNumber_Mul+0xf6>
    2768:	9a 8b       	std	Y+18, r25	; 0x12
    276a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8b 89       	ldd	r24, Y+19	; 0x13
    276e:	9c 89       	ldd	r25, Y+20	; 0x14
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9c 8b       	std	Y+20, r25	; 0x14
    2774:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8b 89       	ldd	r24, Y+19	; 0x13
    2778:	9c 89       	ldd	r25, Y+20	; 0x14
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <ssd_u8SendNumber_Mul+0xea>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <ssd_u8SendNumber_Mul+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6d 89       	ldd	r22, Y+21	; 0x15
    2782:	7e 89       	ldd	r23, Y+22	; 0x16
    2784:	8f 89       	ldd	r24, Y+23	; 0x17
    2786:	98 8d       	ldd	r25, Y+24	; 0x18
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	98 8b       	std	Y+16, r25	; 0x10
    279a:	8f 87       	std	Y+15, r24	; 0x0f
    279c:	8f 85       	ldd	r24, Y+15	; 0x0f
    279e:	98 89       	ldd	r25, Y+16	; 0x10
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <ssd_u8SendNumber_Mul+0x132>
    27a4:	98 8b       	std	Y+16, r25	; 0x10
    27a6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		ssd_u8Disable(Copy_u8ComPort,Copy_u8Com1);
    27a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27aa:	69 a1       	ldd	r22, Y+33	; 0x21
    27ac:	0e 94 ad 12 	call	0x255a	; 0x255a <ssd_u8Disable>
		ssd_u8Enable(Copy_u8ComPort,Copy_u8Com2);
    27b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b2:	6b a1       	ldd	r22, Y+35	; 0x23
    27b4:	0e 94 8d 12 	call	0x251a	; 0x251a <ssd_u8Enable>
		ssd_u8SendNumber(Copy_u8Port,Copy_u8Number2);
    27b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ba:	6a a1       	ldd	r22, Y+34	; 0x22
    27bc:	0e 94 c8 12 	call	0x2590	; 0x2590 <ssd_u8SendNumber>
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a0 e2       	ldi	r26, 0x20	; 32
    27c6:	b1 e4       	ldi	r27, 0x41	; 65
    27c8:	8b 87       	std	Y+11, r24	; 0x0b
    27ca:	9c 87       	std	Y+12, r25	; 0x0c
    27cc:	ad 87       	std	Y+13, r26	; 0x0d
    27ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d8:	20 e0       	ldi	r18, 0x00	; 0
    27da:	30 e0       	ldi	r19, 0x00	; 0
    27dc:	4a ef       	ldi	r20, 0xFA	; 250
    27de:	54 e4       	ldi	r21, 0x44	; 68
    27e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	8f 83       	std	Y+7, r24	; 0x07
    27ea:	98 87       	std	Y+8, r25	; 0x08
    27ec:	a9 87       	std	Y+9, r26	; 0x09
    27ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f0:	6f 81       	ldd	r22, Y+7	; 0x07
    27f2:	78 85       	ldd	r23, Y+8	; 0x08
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2804:	88 23       	and	r24, r24
    2806:	2c f4       	brge	.+10     	; 0x2812 <ssd_u8SendNumber_Mul+0x1a4>
		__ticks = 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9e 83       	std	Y+6, r25	; 0x06
    280e:	8d 83       	std	Y+5, r24	; 0x05
    2810:	3f c0       	rjmp	.+126    	; 0x2890 <ssd_u8SendNumber_Mul+0x222>
	else if (__tmp > 65535)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	4c f5       	brge	.+82     	; 0x287c <ssd_u8SendNumber_Mul+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e2       	ldi	r20, 0x20	; 32
    2838:	51 e4       	ldi	r21, 0x41	; 65
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	9e 83       	std	Y+6, r25	; 0x06
    2850:	8d 83       	std	Y+5, r24	; 0x05
    2852:	0f c0       	rjmp	.+30     	; 0x2872 <ssd_u8SendNumber_Mul+0x204>
    2854:	88 ec       	ldi	r24, 0xC8	; 200
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	9c 83       	std	Y+4, r25	; 0x04
    285a:	8b 83       	std	Y+3, r24	; 0x03
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <ssd_u8SendNumber_Mul+0x1f2>
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2868:	8d 81       	ldd	r24, Y+5	; 0x05
    286a:	9e 81       	ldd	r25, Y+6	; 0x06
    286c:	01 97       	sbiw	r24, 0x01	; 1
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2872:	8d 81       	ldd	r24, Y+5	; 0x05
    2874:	9e 81       	ldd	r25, Y+6	; 0x06
    2876:	00 97       	sbiw	r24, 0x00	; 0
    2878:	69 f7       	brne	.-38     	; 0x2854 <ssd_u8SendNumber_Mul+0x1e6>
    287a:	17 c0       	rjmp	.+46     	; 0x28aa <ssd_u8SendNumber_Mul+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287c:	6f 81       	ldd	r22, Y+7	; 0x07
    287e:	78 85       	ldd	r23, Y+8	; 0x08
    2880:	89 85       	ldd	r24, Y+9	; 0x09
    2882:	9a 85       	ldd	r25, Y+10	; 0x0a
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	8d 81       	ldd	r24, Y+5	; 0x05
    2892:	9e 81       	ldd	r25, Y+6	; 0x06
    2894:	9a 83       	std	Y+2, r25	; 0x02
    2896:	89 83       	std	Y+1, r24	; 0x01
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	9a 81       	ldd	r25, Y+2	; 0x02
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <ssd_u8SendNumber_Mul+0x22e>
    28a0:	9a 83       	std	Y+2, r25	; 0x02
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	02 c0       	rjmp	.+4      	; 0x28aa <ssd_u8SendNumber_Mul+0x23c>
		_delay_ms(10);

	}
	else
	{
		Local_u8_ErrorState=1;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	return Local_u8_ErrorState;
    28aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    28ac:	a3 96       	adiw	r28, 0x23	; 35
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	0f 91       	pop	r16
    28be:	ef 90       	pop	r14
    28c0:	08 95       	ret

000028c2 <HLCD_VoidInit>:




void HLCD_VoidInit(void)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	cd b7       	in	r28, 0x3d	; 61
    28c8:	de b7       	in	r29, 0x3e	; 62
    28ca:	e8 97       	sbiw	r28, 0x38	; 56
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	f8 94       	cli
    28d0:	de bf       	out	0x3e, r29	; 62
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	cd bf       	out	0x3d, r28	; 61

	/* set Port direction output */
	DIO_u8SetPortDirection(HLCD_U8_DATA_PORT,DIO_u8_PORT_OUTPUT);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	6f ef       	ldi	r22, 0xFF	; 255
    28da:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <DIO_u8SetPortDirection>
	/* RS DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_OUTPUT);
    28de:	83 e0       	ldi	r24, 0x03	; 3
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	41 e0       	ldi	r20, 0x01	; 1
    28e4:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	/* RW DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_OUTPUT);
    28e8:	83 e0       	ldi	r24, 0x03	; 3
    28ea:	61 e0       	ldi	r22, 0x01	; 1
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	/* EN DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_OUTPUT);
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	62 e0       	ldi	r22, 0x02	; 2
    28f6:	41 e0       	ldi	r20, 0x01	; 1
    28f8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e2       	ldi	r26, 0x20	; 32
    2902:	b2 e4       	ldi	r27, 0x42	; 66
    2904:	8d ab       	std	Y+53, r24	; 0x35
    2906:	9e ab       	std	Y+54, r25	; 0x36
    2908:	af ab       	std	Y+55, r26	; 0x37
    290a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6d a9       	ldd	r22, Y+53	; 0x35
    290e:	7e a9       	ldd	r23, Y+54	; 0x36
    2910:	8f a9       	ldd	r24, Y+55	; 0x37
    2912:	98 ad       	ldd	r25, Y+56	; 0x38
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	89 ab       	std	Y+49, r24	; 0x31
    2926:	9a ab       	std	Y+50, r25	; 0x32
    2928:	ab ab       	std	Y+51, r26	; 0x33
    292a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    292c:	69 a9       	ldd	r22, Y+49	; 0x31
    292e:	7a a9       	ldd	r23, Y+50	; 0x32
    2930:	8b a9       	ldd	r24, Y+51	; 0x33
    2932:	9c a9       	ldd	r25, Y+52	; 0x34
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <HLCD_VoidInit+0x8c>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    294e:	69 a9       	ldd	r22, Y+49	; 0x31
    2950:	7a a9       	ldd	r23, Y+50	; 0x32
    2952:	8b a9       	ldd	r24, Y+51	; 0x33
    2954:	9c a9       	ldd	r25, Y+52	; 0x34
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6d a9       	ldd	r22, Y+53	; 0x35
    2968:	7e a9       	ldd	r23, Y+54	; 0x36
    296a:	8f a9       	ldd	r24, Y+55	; 0x37
    296c:	98 ad       	ldd	r25, Y+56	; 0x38
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	98 ab       	std	Y+48, r25	; 0x30
    298c:	8f a7       	std	Y+47, r24	; 0x2f
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <HLCD_VoidInit+0xec>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9e a7       	std	Y+46, r25	; 0x2e
    2996:	8d a7       	std	Y+45, r24	; 0x2d
    2998:	8d a5       	ldd	r24, Y+45	; 0x2d
    299a:	9e a5       	ldd	r25, Y+46	; 0x2e
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <HLCD_VoidInit+0xda>
    29a0:	9e a7       	std	Y+46, r25	; 0x2e
    29a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	98 ab       	std	Y+48, r25	; 0x30
    29ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    29b0:	98 a9       	ldd	r25, Y+48	; 0x30
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <HLCD_VoidInit+0xce>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	69 a9       	ldd	r22, Y+49	; 0x31
    29ba:	7a a9       	ldd	r23, Y+50	; 0x32
    29bc:	8b a9       	ldd	r24, Y+51	; 0x33
    29be:	9c a9       	ldd	r25, Y+52	; 0x34
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
    29cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ce:	98 a9       	ldd	r25, Y+48	; 0x30
    29d0:	9c a7       	std	Y+44, r25	; 0x2c
    29d2:	8b a7       	std	Y+43, r24	; 0x2b
    29d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <HLCD_VoidInit+0x116>
    29dc:	9c a7       	std	Y+44, r25	; 0x2c
    29de:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	/* function set 8_bit mode , 2-Line ,font_type 5*7 */
	HLCD_VoidSendCommand(FUNCTIONSET);
    29e0:	88 e3       	ldi	r24, 0x38	; 56
    29e2:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e8       	ldi	r26, 0x80	; 128
    29ec:	bf e3       	ldi	r27, 0x3F	; 63
    29ee:	8f a3       	std	Y+39, r24	; 0x27
    29f0:	98 a7       	std	Y+40, r25	; 0x28
    29f2:	a9 a7       	std	Y+41, r26	; 0x29
    29f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8b a3       	std	Y+35, r24	; 0x23
    2a10:	9c a3       	std	Y+36, r25	; 0x24
    2a12:	ad a3       	std	Y+37, r26	; 0x25
    2a14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a16:	6b a1       	ldd	r22, Y+35	; 0x23
    2a18:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <HLCD_VoidInit+0x176>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9a a3       	std	Y+34, r25	; 0x22
    2a34:	89 a3       	std	Y+33, r24	; 0x21
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6f a1       	ldd	r22, Y+39	; 0x27
    2a52:	78 a5       	ldd	r23, Y+40	; 0x28
    2a54:	89 a5       	ldd	r24, Y+41	; 0x29
    2a56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <HLCD_VoidInit+0x1d6>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	98 a3       	std	Y+32, r25	; 0x20
    2a80:	8f 8f       	std	Y+31, r24	; 0x1f
    2a82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a84:	98 a1       	ldd	r25, Y+32	; 0x20
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <HLCD_VoidInit+0x1c4>
    2a8a:	98 a3       	std	Y+32, r25	; 0x20
    2a8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a90:	9a a1       	ldd	r25, Y+34	; 0x22
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	9a a3       	std	Y+34, r25	; 0x22
    2a96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	89 a1       	ldd	r24, Y+33	; 0x21
    2a9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <HLCD_VoidInit+0x1b8>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa4:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa6:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa8:	9e a1       	ldd	r25, Y+38	; 0x26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9a a3       	std	Y+34, r25	; 0x22
    2ab4:	89 a3       	std	Y+33, r24	; 0x21
    2ab6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab8:	9a a1       	ldd	r25, Y+34	; 0x22
    2aba:	9e 8f       	std	Y+30, r25	; 0x1e
    2abc:	8d 8f       	std	Y+29, r24	; 0x1d
    2abe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ac0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <HLCD_VoidInit+0x200>
    2ac6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display on/off control*/
	HLCD_VoidSendCommand(DISPLAYON);
    2aca:	8f e0       	ldi	r24, 0x0F	; 15
    2acc:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e8       	ldi	r26, 0x80	; 128
    2ad6:	bf e3       	ldi	r27, 0x3F	; 63
    2ad8:	89 8f       	std	Y+25, r24	; 0x19
    2ada:	9a 8f       	std	Y+26, r25	; 0x1a
    2adc:	ab 8f       	std	Y+27, r26	; 0x1b
    2ade:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ae6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a ef       	ldi	r20, 0xFA	; 250
    2aee:	54 e4       	ldi	r21, 0x44	; 68
    2af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8d 8b       	std	Y+21, r24	; 0x15
    2afa:	9e 8b       	std	Y+22, r25	; 0x16
    2afc:	af 8b       	std	Y+23, r26	; 0x17
    2afe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b00:	6d 89       	ldd	r22, Y+21	; 0x15
    2b02:	7e 89       	ldd	r23, Y+22	; 0x16
    2b04:	8f 89       	ldd	r24, Y+23	; 0x17
    2b06:	98 8d       	ldd	r25, Y+24	; 0x18
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <HLCD_VoidInit+0x260>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9c 8b       	std	Y+20, r25	; 0x14
    2b1e:	8b 8b       	std	Y+19, r24	; 0x13
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    2b22:	6d 89       	ldd	r22, Y+21	; 0x15
    2b24:	7e 89       	ldd	r23, Y+22	; 0x16
    2b26:	8f 89       	ldd	r24, Y+23	; 0x17
    2b28:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b3c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9c 8b       	std	Y+20, r25	; 0x14
    2b60:	8b 8b       	std	Y+19, r24	; 0x13
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <HLCD_VoidInit+0x2c0>
    2b64:	88 ec       	ldi	r24, 0xC8	; 200
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9a 8b       	std	Y+18, r25	; 0x12
    2b6a:	89 8b       	std	Y+17, r24	; 0x11
    2b6c:	89 89       	ldd	r24, Y+17	; 0x11
    2b6e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <HLCD_VoidInit+0x2ae>
    2b74:	9a 8b       	std	Y+18, r25	; 0x12
    2b76:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9c 8b       	std	Y+20, r25	; 0x14
    2b80:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8b 89       	ldd	r24, Y+19	; 0x13
    2b84:	9c 89       	ldd	r25, Y+20	; 0x14
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <HLCD_VoidInit+0x2a2>
    2b8a:	14 c0       	rjmp	.+40     	; 0x2bb4 <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9c 8b       	std	Y+20, r25	; 0x14
    2b9e:	8b 8b       	std	Y+19, r24	; 0x13
    2ba0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba4:	98 8b       	std	Y+16, r25	; 0x10
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
    2ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2baa:	98 89       	ldd	r25, Y+16	; 0x10
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <HLCD_VoidInit+0x2ea>
    2bb0:	98 8b       	std	Y+16, r25	; 0x10
    2bb2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* display Clear*/
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e0       	ldi	r26, 0x00	; 0
    2bc0:	b0 e4       	ldi	r27, 0x40	; 64
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <HLCD_VoidInit+0x34a>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <HLCD_VoidInit+0x3aa>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <HLCD_VoidInit+0x398>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <HLCD_VoidInit+0x38c>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <HLCD_VoidInit+0x3d4>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* return to home*/
	HLCD_VoidSendCommand(0b00000010);
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
}
    2ca4:	e8 96       	adiw	r28, 0x38	; 56
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	de bf       	out	0x3e, r29	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	cd bf       	out	0x3d, r28	; 61
    2cb0:	cf 91       	pop	r28
    2cb2:	df 91       	pop	r29
    2cb4:	08 95       	ret

00002cb6 <HLCD_VoidSendChar>:


void HLCD_VoidSendChar(u8 copy_u8char)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	6d 97       	sbiw	r28, 0x1d	; 29
    2cc0:	0f b6       	in	r0, 0x3f	; 63
    2cc2:	f8 94       	cli
    2cc4:	de bf       	out	0x3e, r29	; 62
    2cc6:	0f be       	out	0x3f, r0	; 63
    2cc8:	cd bf       	out	0x3d, r28	; 61
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_HIGH);
    2ccc:	83 e0       	ldi	r24, 0x03	; 3
    2cce:	60 e0       	ldi	r22, 0x00	; 0
    2cd0:	41 e0       	ldi	r20, 0x01	; 1
    2cd2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    2cd6:	83 e0       	ldi	r24, 0x03	; 3
    2cd8:	61 e0       	ldi	r22, 0x01	; 1
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	/*     Data   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8char);
    2ce0:	82 e0       	ldi	r24, 0x02	; 2
    2ce2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2ce4:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    2ce8:	83 e0       	ldi	r24, 0x03	; 3
    2cea:	62 e0       	ldi	r22, 0x02	; 2
    2cec:	41 e0       	ldi	r20, 0x01	; 1
    2cee:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a0 e0       	ldi	r26, 0x00	; 0
    2cf8:	b0 e4       	ldi	r27, 0x40	; 64
    2cfa:	89 8f       	std	Y+25, r24	; 0x19
    2cfc:	9a 8f       	std	Y+26, r25	; 0x1a
    2cfe:	ab 8f       	std	Y+27, r26	; 0x1b
    2d00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	69 8d       	ldd	r22, Y+25	; 0x19
    2d04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0a:	20 e0       	ldi	r18, 0x00	; 0
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	4a ef       	ldi	r20, 0xFA	; 250
    2d10:	54 e4       	ldi	r21, 0x44	; 68
    2d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d16:	dc 01       	movw	r26, r24
    2d18:	cb 01       	movw	r24, r22
    2d1a:	8d 8b       	std	Y+21, r24	; 0x15
    2d1c:	9e 8b       	std	Y+22, r25	; 0x16
    2d1e:	af 8b       	std	Y+23, r26	; 0x17
    2d20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d22:	6d 89       	ldd	r22, Y+21	; 0x15
    2d24:	7e 89       	ldd	r23, Y+22	; 0x16
    2d26:	8f 89       	ldd	r24, Y+23	; 0x17
    2d28:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e8       	ldi	r20, 0x80	; 128
    2d30:	5f e3       	ldi	r21, 0x3F	; 63
    2d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d36:	88 23       	and	r24, r24
    2d38:	2c f4       	brge	.+10     	; 0x2d44 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	9c 8b       	std	Y+20, r25	; 0x14
    2d40:	8b 8b       	std	Y+19, r24	; 0x13
    2d42:	3f c0       	rjmp	.+126    	; 0x2dc2 <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    2d44:	6d 89       	ldd	r22, Y+21	; 0x15
    2d46:	7e 89       	ldd	r23, Y+22	; 0x16
    2d48:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4c:	20 e0       	ldi	r18, 0x00	; 0
    2d4e:	3f ef       	ldi	r19, 0xFF	; 255
    2d50:	4f e7       	ldi	r20, 0x7F	; 127
    2d52:	57 e4       	ldi	r21, 0x47	; 71
    2d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d58:	18 16       	cp	r1, r24
    2d5a:	4c f5       	brge	.+82     	; 0x2dae <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d5c:	69 8d       	ldd	r22, Y+25	; 0x19
    2d5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	40 e2       	ldi	r20, 0x20	; 32
    2d6a:	51 e4       	ldi	r21, 0x41	; 65
    2d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	bc 01       	movw	r22, r24
    2d76:	cd 01       	movw	r24, r26
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9c 8b       	std	Y+20, r25	; 0x14
    2d82:	8b 8b       	std	Y+19, r24	; 0x13
    2d84:	0f c0       	rjmp	.+30     	; 0x2da4 <HLCD_VoidSendChar+0xee>
    2d86:	88 ec       	ldi	r24, 0xC8	; 200
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	9a 8b       	std	Y+18, r25	; 0x12
    2d8c:	89 8b       	std	Y+17, r24	; 0x11
    2d8e:	89 89       	ldd	r24, Y+17	; 0x11
    2d90:	9a 89       	ldd	r25, Y+18	; 0x12
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <HLCD_VoidSendChar+0xdc>
    2d96:	9a 8b       	std	Y+18, r25	; 0x12
    2d98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	9c 8b       	std	Y+20, r25	; 0x14
    2da2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da4:	8b 89       	ldd	r24, Y+19	; 0x13
    2da6:	9c 89       	ldd	r25, Y+20	; 0x14
    2da8:	00 97       	sbiw	r24, 0x00	; 0
    2daa:	69 f7       	brne	.-38     	; 0x2d86 <HLCD_VoidSendChar+0xd0>
    2dac:	14 c0       	rjmp	.+40     	; 0x2dd6 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dae:	6d 89       	ldd	r22, Y+21	; 0x15
    2db0:	7e 89       	ldd	r23, Y+22	; 0x16
    2db2:	8f 89       	ldd	r24, Y+23	; 0x17
    2db4:	98 8d       	ldd	r25, Y+24	; 0x18
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	9c 8b       	std	Y+20, r25	; 0x14
    2dc0:	8b 8b       	std	Y+19, r24	; 0x13
    2dc2:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc4:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc6:	98 8b       	std	Y+16, r25	; 0x10
    2dc8:	8f 87       	std	Y+15, r24	; 0x0f
    2dca:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dcc:	98 89       	ldd	r25, Y+16	; 0x10
    2dce:	01 97       	sbiw	r24, 0x01	; 1
    2dd0:	f1 f7       	brne	.-4      	; 0x2dce <HLCD_VoidSendChar+0x118>
    2dd2:	98 8b       	std	Y+16, r25	; 0x10
    2dd4:	8f 87       	std	Y+15, r24	; 0x0f
	/*       delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    2dd6:	83 e0       	ldi	r24, 0x03	; 3
    2dd8:	62 e0       	ldi	r22, 0x02	; 2
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a0 e0       	ldi	r26, 0x00	; 0
    2de6:	b0 e4       	ldi	r27, 0x40	; 64
    2de8:	8b 87       	std	Y+11, r24	; 0x0b
    2dea:	9c 87       	std	Y+12, r25	; 0x0c
    2dec:	ad 87       	std	Y+13, r26	; 0x0d
    2dee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	4a ef       	ldi	r20, 0xFA	; 250
    2dfe:	54 e4       	ldi	r21, 0x44	; 68
    2e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	8f 83       	std	Y+7, r24	; 0x07
    2e0a:	98 87       	std	Y+8, r25	; 0x08
    2e0c:	a9 87       	std	Y+9, r26	; 0x09
    2e0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e8       	ldi	r20, 0x80	; 128
    2e1e:	5f e3       	ldi	r21, 0x3F	; 63
    2e20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e24:	88 23       	and	r24, r24
    2e26:	2c f4       	brge	.+10     	; 0x2e32 <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	9e 83       	std	Y+6, r25	; 0x06
    2e2e:	8d 83       	std	Y+5, r24	; 0x05
    2e30:	3f c0       	rjmp	.+126    	; 0x2eb0 <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
    2e32:	6f 81       	ldd	r22, Y+7	; 0x07
    2e34:	78 85       	ldd	r23, Y+8	; 0x08
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	3f ef       	ldi	r19, 0xFF	; 255
    2e3e:	4f e7       	ldi	r20, 0x7F	; 127
    2e40:	57 e4       	ldi	r21, 0x47	; 71
    2e42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e46:	18 16       	cp	r1, r24
    2e48:	4c f5       	brge	.+82     	; 0x2e9c <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e2       	ldi	r20, 0x20	; 32
    2e58:	51 e4       	ldi	r21, 0x41	; 65
    2e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5e:	dc 01       	movw	r26, r24
    2e60:	cb 01       	movw	r24, r22
    2e62:	bc 01       	movw	r22, r24
    2e64:	cd 01       	movw	r24, r26
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9e 83       	std	Y+6, r25	; 0x06
    2e70:	8d 83       	std	Y+5, r24	; 0x05
    2e72:	0f c0       	rjmp	.+30     	; 0x2e92 <HLCD_VoidSendChar+0x1dc>
    2e74:	88 ec       	ldi	r24, 0xC8	; 200
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9c 83       	std	Y+4, r25	; 0x04
    2e7a:	8b 83       	std	Y+3, r24	; 0x03
    2e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <HLCD_VoidSendChar+0x1ca>
    2e84:	9c 83       	std	Y+4, r25	; 0x04
    2e86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	01 97       	sbiw	r24, 0x01	; 1
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e92:	8d 81       	ldd	r24, Y+5	; 0x05
    2e94:	9e 81       	ldd	r25, Y+6	; 0x06
    2e96:	00 97       	sbiw	r24, 0x00	; 0
    2e98:	69 f7       	brne	.-38     	; 0x2e74 <HLCD_VoidSendChar+0x1be>
    2e9a:	14 c0       	rjmp	.+40     	; 0x2ec4 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	9e 83       	std	Y+6, r25	; 0x06
    2eae:	8d 83       	std	Y+5, r24	; 0x05
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	9a 83       	std	Y+2, r25	; 0x02
    2eb6:	89 83       	std	Y+1, r24	; 0x01
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <HLCD_VoidSendChar+0x206>
    2ec0:	9a 83       	std	Y+2, r25	; 0x02
    2ec2:	89 83       	std	Y+1, r24	; 0x01
	/*       delay 2ms  */
	_delay_ms(2);

}
    2ec4:	6d 96       	adiw	r28, 0x1d	; 29
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <HLCD_VoidSendCommand>:



void HLCD_VoidSendCommand(u8 copy_u8command)

{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	cd b7       	in	r28, 0x3d	; 61
    2edc:	de b7       	in	r29, 0x3e	; 62
    2ede:	6d 97       	sbiw	r28, 0x1d	; 29
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	de bf       	out	0x3e, r29	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	cd bf       	out	0x3d, r28	; 61
    2eea:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_LOW);
    2eec:	83 e0       	ldi	r24, 0x03	; 3
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    2ef6:	83 e0       	ldi	r24, 0x03	; 3
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	40 e0       	ldi	r20, 0x00	; 0
    2efc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	/*     Command   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8command);
    2f00:	82 e0       	ldi	r24, 0x02	; 2
    2f02:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2f04:	0e 94 17 10 	call	0x202e	; 0x202e <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    2f08:	83 e0       	ldi	r24, 0x03	; 3
    2f0a:	62 e0       	ldi	r22, 0x02	; 2
    2f0c:	41 e0       	ldi	r20, 0x01	; 1
    2f0e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	a0 e0       	ldi	r26, 0x00	; 0
    2f18:	b0 e4       	ldi	r27, 0x40	; 64
    2f1a:	89 8f       	std	Y+25, r24	; 0x19
    2f1c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f1e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f22:	69 8d       	ldd	r22, Y+25	; 0x19
    2f24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	30 e0       	ldi	r19, 0x00	; 0
    2f2e:	4a ef       	ldi	r20, 0xFA	; 250
    2f30:	54 e4       	ldi	r21, 0x44	; 68
    2f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	8d 8b       	std	Y+21, r24	; 0x15
    2f3c:	9e 8b       	std	Y+22, r25	; 0x16
    2f3e:	af 8b       	std	Y+23, r26	; 0x17
    2f40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f42:	6d 89       	ldd	r22, Y+21	; 0x15
    2f44:	7e 89       	ldd	r23, Y+22	; 0x16
    2f46:	8f 89       	ldd	r24, Y+23	; 0x17
    2f48:	98 8d       	ldd	r25, Y+24	; 0x18
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e8       	ldi	r20, 0x80	; 128
    2f50:	5f e3       	ldi	r21, 0x3F	; 63
    2f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f56:	88 23       	and	r24, r24
    2f58:	2c f4       	brge	.+10     	; 0x2f64 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	9c 8b       	std	Y+20, r25	; 0x14
    2f60:	8b 8b       	std	Y+19, r24	; 0x13
    2f62:	3f c0       	rjmp	.+126    	; 0x2fe2 <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    2f64:	6d 89       	ldd	r22, Y+21	; 0x15
    2f66:	7e 89       	ldd	r23, Y+22	; 0x16
    2f68:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	3f ef       	ldi	r19, 0xFF	; 255
    2f70:	4f e7       	ldi	r20, 0x7F	; 127
    2f72:	57 e4       	ldi	r21, 0x47	; 71
    2f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f78:	18 16       	cp	r1, r24
    2f7a:	4c f5       	brge	.+82     	; 0x2fce <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e2       	ldi	r20, 0x20	; 32
    2f8a:	51 e4       	ldi	r21, 0x41	; 65
    2f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f90:	dc 01       	movw	r26, r24
    2f92:	cb 01       	movw	r24, r22
    2f94:	bc 01       	movw	r22, r24
    2f96:	cd 01       	movw	r24, r26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9c 8b       	std	Y+20, r25	; 0x14
    2fa2:	8b 8b       	std	Y+19, r24	; 0x13
    2fa4:	0f c0       	rjmp	.+30     	; 0x2fc4 <HLCD_VoidSendCommand+0xee>
    2fa6:	88 ec       	ldi	r24, 0xC8	; 200
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	9a 8b       	std	Y+18, r25	; 0x12
    2fac:	89 8b       	std	Y+17, r24	; 0x11
    2fae:	89 89       	ldd	r24, Y+17	; 0x11
    2fb0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <HLCD_VoidSendCommand+0xdc>
    2fb6:	9a 8b       	std	Y+18, r25	; 0x12
    2fb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	9c 8b       	std	Y+20, r25	; 0x14
    2fc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fc8:	00 97       	sbiw	r24, 0x00	; 0
    2fca:	69 f7       	brne	.-38     	; 0x2fa6 <HLCD_VoidSendCommand+0xd0>
    2fcc:	14 c0       	rjmp	.+40     	; 0x2ff6 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fce:	6d 89       	ldd	r22, Y+21	; 0x15
    2fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9c 8b       	std	Y+20, r25	; 0x14
    2fe0:	8b 8b       	std	Y+19, r24	; 0x13
    2fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe6:	98 8b       	std	Y+16, r25	; 0x10
    2fe8:	8f 87       	std	Y+15, r24	; 0x0f
    2fea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fec:	98 89       	ldd	r25, Y+16	; 0x10
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <HLCD_VoidSendCommand+0x118>
    2ff2:	98 8b       	std	Y+16, r25	; 0x10
    2ff4:	8f 87       	std	Y+15, r24	; 0x0f
	/*     delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    2ff6:	83 e0       	ldi	r24, 0x03	; 3
    2ff8:	62 e0       	ldi	r22, 0x02	; 2
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a0 e0       	ldi	r26, 0x00	; 0
    3006:	b0 e4       	ldi	r27, 0x40	; 64
    3008:	8b 87       	std	Y+11, r24	; 0x0b
    300a:	9c 87       	std	Y+12, r25	; 0x0c
    300c:	ad 87       	std	Y+13, r26	; 0x0d
    300e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3010:	6b 85       	ldd	r22, Y+11	; 0x0b
    3012:	7c 85       	ldd	r23, Y+12	; 0x0c
    3014:	8d 85       	ldd	r24, Y+13	; 0x0d
    3016:	9e 85       	ldd	r25, Y+14	; 0x0e
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a ef       	ldi	r20, 0xFA	; 250
    301e:	54 e4       	ldi	r21, 0x44	; 68
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	8f 83       	std	Y+7, r24	; 0x07
    302a:	98 87       	std	Y+8, r25	; 0x08
    302c:	a9 87       	std	Y+9, r26	; 0x09
    302e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3030:	6f 81       	ldd	r22, Y+7	; 0x07
    3032:	78 85       	ldd	r23, Y+8	; 0x08
    3034:	89 85       	ldd	r24, Y+9	; 0x09
    3036:	9a 85       	ldd	r25, Y+10	; 0x0a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e8       	ldi	r20, 0x80	; 128
    303e:	5f e3       	ldi	r21, 0x3F	; 63
    3040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3044:	88 23       	and	r24, r24
    3046:	2c f4       	brge	.+10     	; 0x3052 <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	9e 83       	std	Y+6, r25	; 0x06
    304e:	8d 83       	std	Y+5, r24	; 0x05
    3050:	3f c0       	rjmp	.+126    	; 0x30d0 <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    3052:	6f 81       	ldd	r22, Y+7	; 0x07
    3054:	78 85       	ldd	r23, Y+8	; 0x08
    3056:	89 85       	ldd	r24, Y+9	; 0x09
    3058:	9a 85       	ldd	r25, Y+10	; 0x0a
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	3f ef       	ldi	r19, 0xFF	; 255
    305e:	4f e7       	ldi	r20, 0x7F	; 127
    3060:	57 e4       	ldi	r21, 0x47	; 71
    3062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3066:	18 16       	cp	r1, r24
    3068:	4c f5       	brge	.+82     	; 0x30bc <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e2       	ldi	r20, 0x20	; 32
    3078:	51 e4       	ldi	r21, 0x41	; 65
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	0f c0       	rjmp	.+30     	; 0x30b2 <HLCD_VoidSendCommand+0x1dc>
    3094:	88 ec       	ldi	r24, 0xC8	; 200
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	9c 83       	std	Y+4, r25	; 0x04
    309a:	8b 83       	std	Y+3, r24	; 0x03
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <HLCD_VoidSendCommand+0x1ca>
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a8:	8d 81       	ldd	r24, Y+5	; 0x05
    30aa:	9e 81       	ldd	r25, Y+6	; 0x06
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	9e 83       	std	Y+6, r25	; 0x06
    30b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b2:	8d 81       	ldd	r24, Y+5	; 0x05
    30b4:	9e 81       	ldd	r25, Y+6	; 0x06
    30b6:	00 97       	sbiw	r24, 0x00	; 0
    30b8:	69 f7       	brne	.-38     	; 0x3094 <HLCD_VoidSendCommand+0x1be>
    30ba:	14 c0       	rjmp	.+40     	; 0x30e4 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30bc:	6f 81       	ldd	r22, Y+7	; 0x07
    30be:	78 85       	ldd	r23, Y+8	; 0x08
    30c0:	89 85       	ldd	r24, Y+9	; 0x09
    30c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	8d 81       	ldd	r24, Y+5	; 0x05
    30d2:	9e 81       	ldd	r25, Y+6	; 0x06
    30d4:	9a 83       	std	Y+2, r25	; 0x02
    30d6:	89 83       	std	Y+1, r24	; 0x01
    30d8:	89 81       	ldd	r24, Y+1	; 0x01
    30da:	9a 81       	ldd	r25, Y+2	; 0x02
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <HLCD_VoidSendCommand+0x206>
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
	/*     delay 2ms  */
	_delay_ms(2);

}
    30e4:	6d 96       	adiw	r28, 0x1d	; 29
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    30f0:	cf 91       	pop	r28
    30f2:	df 91       	pop	r29
    30f4:	08 95       	ret

000030f6 <HLCD_VoidSendString>:


void HLCD_VoidSendString(u8 copy_u8Char[])
{
    30f6:	df 93       	push	r29
    30f8:	cf 93       	push	r28
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <HLCD_VoidSendString+0x6>
    30fc:	0f 92       	push	r0
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	9b 83       	std	Y+3, r25	; 0x03
    3104:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    3106:	19 82       	std	Y+1, r1	; 0x01
    3108:	0e c0       	rjmp	.+28     	; 0x3126 <HLCD_VoidSendString+0x30>
	while(copy_u8Char[i]!='\0')
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
    310a:	89 81       	ldd	r24, Y+1	; 0x01
    310c:	28 2f       	mov	r18, r24
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	8a 81       	ldd	r24, Y+2	; 0x02
    3112:	9b 81       	ldd	r25, Y+3	; 0x03
    3114:	fc 01       	movw	r30, r24
    3116:	e2 0f       	add	r30, r18
    3118:	f3 1f       	adc	r31, r19
    311a:	80 81       	ld	r24, Z
    311c:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>
		i++;
    3120:	89 81       	ldd	r24, Y+1	; 0x01
    3122:	8f 5f       	subi	r24, 0xFF	; 255
    3124:	89 83       	std	Y+1, r24	; 0x01


void HLCD_VoidSendString(u8 copy_u8Char[])
{
	u8 i=0;
	while(copy_u8Char[i]!='\0')
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	8a 81       	ldd	r24, Y+2	; 0x02
    312e:	9b 81       	ldd	r25, Y+3	; 0x03
    3130:	fc 01       	movw	r30, r24
    3132:	e2 0f       	add	r30, r18
    3134:	f3 1f       	adc	r31, r19
    3136:	80 81       	ld	r24, Z
    3138:	88 23       	and	r24, r24
    313a:	39 f7       	brne	.-50     	; 0x310a <HLCD_VoidSendString+0x14>
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
		i++;
	}
}
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <HLCD_VoidSendNumber>:



void HLCD_VoidSendNumber(u32 copy_u8Char)
{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	00 d0       	rcall	.+0      	; 0x314e <HLCD_VoidSendNumber+0x6>
    314e:	00 d0       	rcall	.+0      	; 0x3150 <HLCD_VoidSendNumber+0x8>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9c 83       	std	Y+4, r25	; 0x04
    3156:	8b 83       	std	Y+3, r24	; 0x03
	u32  Local_u8_revers_number = 1;
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8Char == 0)
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	9c 81       	ldd	r25, Y+4	; 0x04
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	39 f5       	brne	.+78     	; 0x31b6 <HLCD_VoidSendNumber+0x6e>
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	80 5d       	subi	r24, 0xD0	; 208
    316c:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>
    3170:	22 c0       	rjmp	.+68     	; 0x31b6 <HLCD_VoidSendNumber+0x6e>
	}

	while(copy_u8Char > 0)
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	9c 01       	movw	r18, r24
    3178:	22 0f       	add	r18, r18
    317a:	33 1f       	adc	r19, r19
    317c:	c9 01       	movw	r24, r18
    317e:	88 0f       	add	r24, r24
    3180:	99 1f       	adc	r25, r25
    3182:	88 0f       	add	r24, r24
    3184:	99 1f       	adc	r25, r25
    3186:	f9 01       	movw	r30, r18
    3188:	e8 0f       	add	r30, r24
    318a:	f9 1f       	adc	r31, r25
    318c:	8b 81       	ldd	r24, Y+3	; 0x03
    318e:	9c 81       	ldd	r25, Y+4	; 0x04
    3190:	2a e0       	ldi	r18, 0x0A	; 10
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	b9 01       	movw	r22, r18
    3196:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    319a:	8e 0f       	add	r24, r30
    319c:	9f 1f       	adc	r25, r31
    319e:	9a 83       	std	Y+2, r25	; 0x02
    31a0:	89 83       	std	Y+1, r24	; 0x01
		copy_u8Char=copy_u8Char/10;
    31a2:	8b 81       	ldd	r24, Y+3	; 0x03
    31a4:	9c 81       	ldd	r25, Y+4	; 0x04
    31a6:	2a e0       	ldi	r18, 0x0A	; 10
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	b9 01       	movw	r22, r18
    31ac:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    31b0:	cb 01       	movw	r24, r22
    31b2:	9c 83       	std	Y+4, r25	; 0x04
    31b4:	8b 83       	std	Y+3, r24	; 0x03
	if(copy_u8Char == 0)
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
	}

	while(copy_u8Char > 0)
    31b6:	8b 81       	ldd	r24, Y+3	; 0x03
    31b8:	9c 81       	ldd	r25, Y+4	; 0x04
    31ba:	00 97       	sbiw	r24, 0x00	; 0
    31bc:	d1 f6       	brne	.-76     	; 0x3172 <HLCD_VoidSendNumber+0x2a>
    31be:	17 c0       	rjmp	.+46     	; 0x31ee <HLCD_VoidSendNumber+0xa6>
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
	{
		copy_u8Char=Local_u8_revers_number % 10;
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	9a 81       	ldd	r25, Y+2	; 0x02
    31c4:	2a e0       	ldi	r18, 0x0A	; 10
    31c6:	30 e0       	ldi	r19, 0x00	; 0
    31c8:	b9 01       	movw	r22, r18
    31ca:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    31ce:	9c 83       	std	Y+4, r25	; 0x04
    31d0:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8_revers_number=Local_u8_revers_number/10;
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	9a 81       	ldd	r25, Y+2	; 0x02
    31d6:	2a e0       	ldi	r18, 0x0A	; 10
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	b9 01       	movw	r22, r18
    31dc:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    31e0:	cb 01       	movw	r24, r22
    31e2:	9a 83       	std	Y+2, r25	; 0x02
    31e4:	89 83       	std	Y+1, r24	; 0x01
		HLCD_VoidSendChar(copy_u8Char+'0');
    31e6:	8b 81       	ldd	r24, Y+3	; 0x03
    31e8:	80 5d       	subi	r24, 0xD0	; 208
    31ea:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
    31ee:	89 81       	ldd	r24, Y+1	; 0x01
    31f0:	9a 81       	ldd	r25, Y+2	; 0x02
    31f2:	82 30       	cpi	r24, 0x02	; 2
    31f4:	91 05       	cpc	r25, r1
    31f6:	20 f7       	brcc	.-56     	; 0x31c0 <HLCD_VoidSendNumber+0x78>

	}



}
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	0f 90       	pop	r0
    31fe:	0f 90       	pop	r0
    3200:	cf 91       	pop	r28
    3202:	df 91       	pop	r29
    3204:	08 95       	ret

00003206 <HLCD_VoidGotoXY>:




void HLCD_VoidGotoXY(u8 copy_U8RowPos ,u8 copy_U8ColPos)
{
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	00 d0       	rcall	.+0      	; 0x320c <HLCD_VoidGotoXY+0x6>
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	89 83       	std	Y+1, r24	; 0x01
    3212:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_U8RowPos ==0)
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	88 23       	and	r24, r24
    3218:	29 f4       	brne	.+10     	; 0x3224 <HLCD_VoidGotoXY+0x1e>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128);
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	80 58       	subi	r24, 0x80	; 128
    321e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
    3222:	07 c0       	rjmp	.+14     	; 0x3232 <HLCD_VoidGotoXY+0x2c>

	}
	else if(copy_U8RowPos ==1)
    3224:	89 81       	ldd	r24, Y+1	; 0x01
    3226:	81 30       	cpi	r24, 0x01	; 1
    3228:	21 f4       	brne	.+8      	; 0x3232 <HLCD_VoidGotoXY+0x2c>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128+64);
    322a:	8a 81       	ldd	r24, Y+2	; 0x02
    322c:	80 54       	subi	r24, 0x40	; 64
    322e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>

	}

}
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	cf 91       	pop	r28
    3238:	df 91       	pop	r29
    323a:	08 95       	ret

0000323c <HLCD_VoidDraw>:




void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	00 d0       	rcall	.+0      	; 0x3242 <HLCD_VoidDraw+0x6>
    3242:	00 d0       	rcall	.+0      	; 0x3244 <HLCD_VoidDraw+0x8>
    3244:	00 d0       	rcall	.+0      	; 0x3246 <HLCD_VoidDraw+0xa>
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
    324a:	9b 83       	std	Y+3, r25	; 0x03
    324c:	8a 83       	std	Y+2, r24	; 0x02
    324e:	6c 83       	std	Y+4, r22	; 0x04
    3250:	4d 83       	std	Y+5, r20	; 0x05
    3252:	2e 83       	std	Y+6, r18	; 0x06
	u8 i=0;
    3254:	19 82       	std	Y+1, r1	; 0x01
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
    3256:	8c 81       	ldd	r24, Y+4	; 0x04
    3258:	88 2f       	mov	r24, r24
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	08 96       	adiw	r24, 0x08	; 8
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	88 0f       	add	r24, r24
    3268:	99 1f       	adc	r25, r25
    326a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
	for(i=0;i<8;i++)
    326e:	19 82       	std	Y+1, r1	; 0x01
    3270:	0e c0       	rjmp	.+28     	; 0x328e <HLCD_VoidDraw+0x52>
	{
		HLCD_VoidSendChar(copy_u8char[i]);
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	fc 01       	movw	r30, r24
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	80 81       	ld	r24, Z
    3284:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>

void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
	u8 i=0;
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
	for(i=0;i<8;i++)
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	88 30       	cpi	r24, 0x08	; 8
    3292:	78 f3       	brcs	.-34     	; 0x3272 <HLCD_VoidDraw+0x36>
	{
		HLCD_VoidSendChar(copy_u8char[i]);

	}
	HLCD_VoidSendCommand(0b10000000);//address 0 of DD_Ram
    3294:	80 e8       	ldi	r24, 0x80	; 128
    3296:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
	HLCD_VoidGotoXY(copy_u8Xpos,copy_u8Ypos);
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	6e 81       	ldd	r22, Y+6	; 0x06
    329e:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
	HLCD_VoidSendChar(copy_u8Location); //address location 0 of CG_Ram
    32a2:	8c 81       	ldd	r24, Y+4	; 0x04
    32a4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>

}
    32a8:	26 96       	adiw	r28, 0x06	; 6
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <KPD_u8GetPressedKey>:
#include "KPD_Interface.h"
#include "KPD_Config.h"
#include "KPD_Private.h"

u8 KPD_u8GetPressedKey(void)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <KPD_u8GetPressedKey+0x6>
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <KPD_u8GetPressedKey+0x8>
    32c2:	0f 92       	push	r0
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    32c8:	8f ef       	ldi	r24, 0xFF	; 255
    32ca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIndex,Local_u8RowIndex;
	u8 Local_u8PinSate;

	DIO_u8SetPinDirection(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_OUTPUT);
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	41 e0       	ldi	r20, 0x01	; 1
    32d2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_OUTPUT);
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	41 e0       	ldi	r20, 0x01	; 1
    32dc:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_OUTPUT);
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	62 e0       	ldi	r22, 0x02	; 2
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_OUTPUT);
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	63 e0       	ldi	r22, 0x03	; 3
    32ee:	41 e0       	ldi	r20, 0x01	; 1
    32f0:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_HIGH);
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	41 e0       	ldi	r20, 0x01	; 1
    32fa:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_HIGH);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	61 e0       	ldi	r22, 0x01	; 1
    3302:	41 e0       	ldi	r20, 0x01	; 1
    3304:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_HIGH);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	62 e0       	ldi	r22, 0x02	; 2
    330c:	41 e0       	ldi	r20, 0x01	; 1
    330e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_HIGH);
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	63 e0       	ldi	r22, 0x03	; 3
    3316:	41 e0       	ldi	r20, 0x01	; 1
    3318:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_LOW);
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	64 e0       	ldi	r22, 0x04	; 4
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_LOW);
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	65 e0       	ldi	r22, 0x05	; 5
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_LOW);
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	66 e0       	ldi	r22, 0x06	; 6
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_LOW);
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	67 e0       	ldi	r22, 0x07	; 7
    333e:	40 e0       	ldi	r20, 0x00	; 0
    3340:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

	/*Activate Pull up */
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_HIGH);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	64 e0       	ldi	r22, 0x04	; 4
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_HIGH);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	65 e0       	ldi	r22, 0x05	; 5
    3352:	41 e0       	ldi	r20, 0x01	; 1
    3354:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_HIGH);
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	66 e0       	ldi	r22, 0x06	; 6
    335c:	41 e0       	ldi	r20, 0x01	; 1
    335e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_HIGH);
    3362:	81 e0       	ldi	r24, 0x01	; 1
    3364:	67 e0       	ldi	r22, 0x07	; 7
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    336c:	1a 82       	std	Y+2, r1	; 0x02
    336e:	5e c0       	rjmp	.+188    	; 0x342c <KPD_u8GetPressedKey+0x172>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);
    3370:	8a 81       	ldd	r24, Y+2	; 0x02
    3372:	88 2f       	mov	r24, r24
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	fc 01       	movw	r30, r24
    3378:	ef 5b       	subi	r30, 0xBF	; 191
    337a:	fe 4f       	sbci	r31, 0xFE	; 254
    337c:	90 81       	ld	r25, Z
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	69 2f       	mov	r22, r25
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    3388:	19 82       	std	Y+1, r1	; 0x01
    338a:	3d c0       	rjmp	.+122    	; 0x3406 <KPD_u8GetPressedKey+0x14c>
		{

			/*Read the current Row*/

			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	88 2f       	mov	r24, r24
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	fc 01       	movw	r30, r24
    3394:	e3 5c       	subi	r30, 0xC3	; 195
    3396:	fe 4f       	sbci	r31, 0xFE	; 254
    3398:	90 81       	ld	r25, Z
    339a:	9e 01       	movw	r18, r28
    339c:	2c 5f       	subi	r18, 0xFC	; 252
    339e:	3f 4f       	sbci	r19, 0xFF	; 255
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	69 2f       	mov	r22, r25
    33a4:	a9 01       	movw	r20, r18
    33a6:	0e 94 5f 10 	call	0x20be	; 0x20be <DIO_u8GetPinValue>


			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
    33aa:	8c 81       	ldd	r24, Y+4	; 0x04
    33ac:	88 23       	and	r24, r24
    33ae:	41 f5       	brne	.+80     	; 0x3400 <KPD_u8GetPressedKey+0x146>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	48 2f       	mov	r20, r24
    33b4:	50 e0       	ldi	r21, 0x00	; 0
    33b6:	8a 81       	ldd	r24, Y+2	; 0x02
    33b8:	28 2f       	mov	r18, r24
    33ba:	30 e0       	ldi	r19, 0x00	; 0
    33bc:	ca 01       	movw	r24, r20
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	88 0f       	add	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	82 0f       	add	r24, r18
    33c8:	93 1f       	adc	r25, r19
    33ca:	fc 01       	movw	r30, r24
    33cc:	eb 5b       	subi	r30, 0xBB	; 187
    33ce:	fe 4f       	sbci	r31, 0xFE	; 254
    33d0:	80 81       	ld	r24, Z
    33d2:	8b 83       	std	Y+3, r24	; 0x03
    33d4:	0f c0       	rjmp	.+30     	; 0x33f4 <KPD_u8GetPressedKey+0x13a>
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	88 2f       	mov	r24, r24
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	fc 01       	movw	r30, r24
    33de:	e3 5c       	subi	r30, 0xC3	; 195
    33e0:	fe 4f       	sbci	r31, 0xFE	; 254
    33e2:	90 81       	ld	r25, Z
    33e4:	9e 01       	movw	r18, r28
    33e6:	2c 5f       	subi	r18, 0xFC	; 252
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	69 2f       	mov	r22, r25
    33ee:	a9 01       	movw	r20, r18
    33f0:	0e 94 5f 10 	call	0x20be	; 0x20be <DIO_u8GetPinValue>
			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	88 23       	and	r24, r24
    33f8:	71 f3       	breq	.-36     	; 0x33d6 <KPD_u8GetPressedKey+0x11c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
				}
				return  Local_u8PressedKey;
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	8d 83       	std	Y+5, r24	; 0x05
    33fe:	1c c0       	rjmp	.+56     	; 0x3438 <KPD_u8GetPressedKey+0x17e>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    3400:	89 81       	ldd	r24, Y+1	; 0x01
    3402:	8f 5f       	subi	r24, 0xFF	; 255
    3404:	89 83       	std	Y+1, r24	; 0x01
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	84 30       	cpi	r24, 0x04	; 4
    340a:	08 f4       	brcc	.+2      	; 0x340e <KPD_u8GetPressedKey+0x154>
    340c:	bf cf       	rjmp	.-130    	; 0x338c <KPD_u8GetPressedKey+0xd2>
				}
				return  Local_u8PressedKey;
			}
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	88 2f       	mov	r24, r24
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	fc 01       	movw	r30, r24
    3416:	ef 5b       	subi	r30, 0xBF	; 191
    3418:	fe 4f       	sbci	r31, 0xFE	; 254
    341a:	90 81       	ld	r25, Z
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	69 2f       	mov	r22, r25
    3420:	41 e0       	ldi	r20, 0x01	; 1
    3422:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8a 83       	std	Y+2, r24	; 0x02
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	84 30       	cpi	r24, 0x04	; 4
    3430:	08 f4       	brcc	.+2      	; 0x3434 <KPD_u8GetPressedKey+0x17a>
    3432:	9e cf       	rjmp	.-196    	; 0x3370 <KPD_u8GetPressedKey+0xb6>
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
	}

	return Local_u8PressedKey;
    3434:	8b 81       	ldd	r24, Y+3	; 0x03
    3436:	8d 83       	std	Y+5, r24	; 0x05
    3438:	8d 81       	ldd	r24, Y+5	; 0x05

}
    343a:	0f 90       	pop	r0
    343c:	0f 90       	pop	r0
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <main>:
u16 ADC_Result;
volatile u8 temp=0;
volatile u32 volt, digital;

void main (void)
{
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	ca 56       	subi	r28, 0x6A	; 106
    3458:	d0 40       	sbci	r29, 0x00	; 0
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key=0;
    3464:	fe 01       	movw	r30, r28
    3466:	e6 59       	subi	r30, 0x96	; 150
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	10 82       	st	Z, r1
	u8 Password=0;
    346c:	fe 01       	movw	r30, r28
    346e:	e7 59       	subi	r30, 0x97	; 151
    3470:	ff 4f       	sbci	r31, 0xFF	; 255
    3472:	10 82       	st	Z, r1
	u8 Flag_star=0;
    3474:	fe 01       	movw	r30, r28
    3476:	e8 59       	subi	r30, 0x98	; 152
    3478:	ff 4f       	sbci	r31, 0xFF	; 255
    347a:	10 82       	st	Z, r1
	u8 number_of_tries=0;
    347c:	fe 01       	movw	r30, r28
    347e:	e9 59       	subi	r30, 0x99	; 153
    3480:	ff 4f       	sbci	r31, 0xFF	; 255
    3482:	10 82       	st	Z, r1
	u8 welcome_flag=0;
    3484:	fe 01       	movw	r30, r28
    3486:	ea 59       	subi	r30, 0x9A	; 154
    3488:	ff 4f       	sbci	r31, 0xFF	; 255
    348a:	10 82       	st	Z, r1
	u8 Fan_flag=0;
    348c:	fe 01       	movw	r30, r28
    348e:	eb 59       	subi	r30, 0x9B	; 155
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	10 82       	st	Z, r1
	u8 LED_flag =0;
    3494:	fe 01       	movw	r30, r28
    3496:	ec 59       	subi	r30, 0x9C	; 156
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	10 82       	st	Z, r1
	u8 Door_flag=0;
    349c:	fe 01       	movw	r30, r28
    349e:	ed 59       	subi	r30, 0x9D	; 157
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	10 82       	st	Z, r1

	ADC_voidInit();
    34a4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <ADC_voidInit>
	GIE_voidEnable();
    34a8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GIE_voidEnable>
	HLCD_VoidInit();
    34ac:	0e 94 61 14 	call	0x28c2	; 0x28c2 <HLCD_VoidInit>
	Servo_Init();
    34b0:	0e 94 4f 12 	call	0x249e	; 0x249e <Servo_Init>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_INPUT);
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	40 e0       	ldi	r20, 0x00	; 0
    34ba:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>
	DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_LOW);
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_OUTPUT);
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_OUTPUT);
    34d2:	80 e0       	ldi	r24, 0x00	; 0
    34d4:	62 e0       	ldi	r22, 0x02	; 2
    34d6:	41 e0       	ldi	r20, 0x01	; 1
    34d8:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN4,DIO_u8_PIN_OUTPUT);
    34dc:	83 e0       	ldi	r24, 0x03	; 3
    34de:	64 e0       	ldi	r22, 0x04	; 4
    34e0:	41 e0       	ldi	r20, 0x01	; 1
    34e2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <DIO_u8SetPinDirection>

	HLCD_VoidSendString((u8*)"Welcome Back");
    34e6:	80 e6       	ldi	r24, 0x60	; 96
    34e8:	90 e0       	ldi	r25, 0x00	; 0
    34ea:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    34ee:	fe 01       	movw	r30, r28
    34f0:	e1 5a       	subi	r30, 0xA1	; 161
    34f2:	ff 4f       	sbci	r31, 0xFF	; 255
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	aa e7       	ldi	r26, 0x7A	; 122
    34fa:	b4 e4       	ldi	r27, 0x44	; 68
    34fc:	80 83       	st	Z, r24
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	a2 83       	std	Z+2, r26	; 0x02
    3502:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	8e 01       	movw	r16, r28
    3506:	05 5a       	subi	r16, 0xA5	; 165
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	fe 01       	movw	r30, r28
    350c:	e1 5a       	subi	r30, 0xA1	; 161
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	60 81       	ld	r22, Z
    3512:	71 81       	ldd	r23, Z+1	; 0x01
    3514:	82 81       	ldd	r24, Z+2	; 0x02
    3516:	93 81       	ldd	r25, Z+3	; 0x03
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	4a ef       	ldi	r20, 0xFA	; 250
    351e:	54 e4       	ldi	r21, 0x44	; 68
    3520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	f8 01       	movw	r30, r16
    352a:	80 83       	st	Z, r24
    352c:	91 83       	std	Z+1, r25	; 0x01
    352e:	a2 83       	std	Z+2, r26	; 0x02
    3530:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3532:	fe 01       	movw	r30, r28
    3534:	e5 5a       	subi	r30, 0xA5	; 165
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	44 f4       	brge	.+16     	; 0x3560 <main+0x116>
		__ticks = 1;
    3550:	fe 01       	movw	r30, r28
    3552:	e7 5a       	subi	r30, 0xA7	; 167
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	91 83       	std	Z+1, r25	; 0x01
    355c:	80 83       	st	Z, r24
    355e:	64 c0       	rjmp	.+200    	; 0x3628 <main+0x1de>
	else if (__tmp > 65535)
    3560:	fe 01       	movw	r30, r28
    3562:	e5 5a       	subi	r30, 0xA5	; 165
    3564:	ff 4f       	sbci	r31, 0xFF	; 255
    3566:	60 81       	ld	r22, Z
    3568:	71 81       	ldd	r23, Z+1	; 0x01
    356a:	82 81       	ldd	r24, Z+2	; 0x02
    356c:	93 81       	ldd	r25, Z+3	; 0x03
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	3f ef       	ldi	r19, 0xFF	; 255
    3572:	4f e7       	ldi	r20, 0x7F	; 127
    3574:	57 e4       	ldi	r21, 0x47	; 71
    3576:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357a:	18 16       	cp	r1, r24
    357c:	0c f0       	brlt	.+2      	; 0x3580 <main+0x136>
    357e:	43 c0       	rjmp	.+134    	; 0x3606 <main+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3580:	fe 01       	movw	r30, r28
    3582:	e1 5a       	subi	r30, 0xA1	; 161
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	60 81       	ld	r22, Z
    3588:	71 81       	ldd	r23, Z+1	; 0x01
    358a:	82 81       	ldd	r24, Z+2	; 0x02
    358c:	93 81       	ldd	r25, Z+3	; 0x03
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e2       	ldi	r20, 0x20	; 32
    3594:	51 e4       	ldi	r21, 0x41	; 65
    3596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359a:	dc 01       	movw	r26, r24
    359c:	cb 01       	movw	r24, r22
    359e:	8e 01       	movw	r16, r28
    35a0:	07 5a       	subi	r16, 0xA7	; 167
    35a2:	1f 4f       	sbci	r17, 0xFF	; 255
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	f8 01       	movw	r30, r16
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
    35b6:	1f c0       	rjmp	.+62     	; 0x35f6 <main+0x1ac>
    35b8:	fe 01       	movw	r30, r28
    35ba:	e9 5a       	subi	r30, 0xA9	; 169
    35bc:	ff 4f       	sbci	r31, 0xFF	; 255
    35be:	88 ec       	ldi	r24, 0xC8	; 200
    35c0:	90 e0       	ldi	r25, 0x00	; 0
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	80 83       	st	Z, r24
    35c6:	fe 01       	movw	r30, r28
    35c8:	e9 5a       	subi	r30, 0xA9	; 169
    35ca:	ff 4f       	sbci	r31, 0xFF	; 255
    35cc:	80 81       	ld	r24, Z
    35ce:	91 81       	ldd	r25, Z+1	; 0x01
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <main+0x186>
    35d4:	fe 01       	movw	r30, r28
    35d6:	e9 5a       	subi	r30, 0xA9	; 169
    35d8:	ff 4f       	sbci	r31, 0xFF	; 255
    35da:	91 83       	std	Z+1, r25	; 0x01
    35dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35de:	de 01       	movw	r26, r28
    35e0:	a7 5a       	subi	r26, 0xA7	; 167
    35e2:	bf 4f       	sbci	r27, 0xFF	; 255
    35e4:	fe 01       	movw	r30, r28
    35e6:	e7 5a       	subi	r30, 0xA7	; 167
    35e8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ea:	80 81       	ld	r24, Z
    35ec:	91 81       	ldd	r25, Z+1	; 0x01
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	11 96       	adiw	r26, 0x01	; 1
    35f2:	9c 93       	st	X, r25
    35f4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	fe 01       	movw	r30, r28
    35f8:	e7 5a       	subi	r30, 0xA7	; 167
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	80 81       	ld	r24, Z
    35fe:	91 81       	ldd	r25, Z+1	; 0x01
    3600:	00 97       	sbiw	r24, 0x00	; 0
    3602:	d1 f6       	brne	.-76     	; 0x35b8 <main+0x16e>
    3604:	27 c0       	rjmp	.+78     	; 0x3654 <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3606:	8e 01       	movw	r16, r28
    3608:	07 5a       	subi	r16, 0xA7	; 167
    360a:	1f 4f       	sbci	r17, 0xFF	; 255
    360c:	fe 01       	movw	r30, r28
    360e:	e5 5a       	subi	r30, 0xA5	; 165
    3610:	ff 4f       	sbci	r31, 0xFF	; 255
    3612:	60 81       	ld	r22, Z
    3614:	71 81       	ldd	r23, Z+1	; 0x01
    3616:	82 81       	ldd	r24, Z+2	; 0x02
    3618:	93 81       	ldd	r25, Z+3	; 0x03
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	f8 01       	movw	r30, r16
    3624:	91 83       	std	Z+1, r25	; 0x01
    3626:	80 83       	st	Z, r24
    3628:	de 01       	movw	r26, r28
    362a:	ab 5a       	subi	r26, 0xAB	; 171
    362c:	bf 4f       	sbci	r27, 0xFF	; 255
    362e:	fe 01       	movw	r30, r28
    3630:	e7 5a       	subi	r30, 0xA7	; 167
    3632:	ff 4f       	sbci	r31, 0xFF	; 255
    3634:	80 81       	ld	r24, Z
    3636:	91 81       	ldd	r25, Z+1	; 0x01
    3638:	8d 93       	st	X+, r24
    363a:	9c 93       	st	X, r25
    363c:	fe 01       	movw	r30, r28
    363e:	eb 5a       	subi	r30, 0xAB	; 171
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	80 81       	ld	r24, Z
    3644:	91 81       	ldd	r25, Z+1	; 0x01
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <main+0x1fc>
    364a:	fe 01       	movw	r30, r28
    364c:	eb 5a       	subi	r30, 0xAB	; 171
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	91 83       	std	Z+1, r25	; 0x01
    3652:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>

	HLCD_VoidSendString((u8*)"Enter Password");
    365a:	8d e6       	ldi	r24, 0x6D	; 109
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    3662:	fe 01       	movw	r30, r28
    3664:	ef 5a       	subi	r30, 0xAF	; 175
    3666:	ff 4f       	sbci	r31, 0xFF	; 255
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	aa e7       	ldi	r26, 0x7A	; 122
    366e:	b4 e4       	ldi	r27, 0x44	; 68
    3670:	80 83       	st	Z, r24
    3672:	91 83       	std	Z+1, r25	; 0x01
    3674:	a2 83       	std	Z+2, r26	; 0x02
    3676:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3678:	8e 01       	movw	r16, r28
    367a:	03 5b       	subi	r16, 0xB3	; 179
    367c:	1f 4f       	sbci	r17, 0xFF	; 255
    367e:	fe 01       	movw	r30, r28
    3680:	ef 5a       	subi	r30, 0xAF	; 175
    3682:	ff 4f       	sbci	r31, 0xFF	; 255
    3684:	60 81       	ld	r22, Z
    3686:	71 81       	ldd	r23, Z+1	; 0x01
    3688:	82 81       	ldd	r24, Z+2	; 0x02
    368a:	93 81       	ldd	r25, Z+3	; 0x03
    368c:	20 e0       	ldi	r18, 0x00	; 0
    368e:	30 e0       	ldi	r19, 0x00	; 0
    3690:	4a ef       	ldi	r20, 0xFA	; 250
    3692:	54 e4       	ldi	r21, 0x44	; 68
    3694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	f8 01       	movw	r30, r16
    369e:	80 83       	st	Z, r24
    36a0:	91 83       	std	Z+1, r25	; 0x01
    36a2:	a2 83       	std	Z+2, r26	; 0x02
    36a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36a6:	fe 01       	movw	r30, r28
    36a8:	e3 5b       	subi	r30, 0xB3	; 179
    36aa:	ff 4f       	sbci	r31, 0xFF	; 255
    36ac:	60 81       	ld	r22, Z
    36ae:	71 81       	ldd	r23, Z+1	; 0x01
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	40 e8       	ldi	r20, 0x80	; 128
    36ba:	5f e3       	ldi	r21, 0x3F	; 63
    36bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36c0:	88 23       	and	r24, r24
    36c2:	44 f4       	brge	.+16     	; 0x36d4 <main+0x28a>
		__ticks = 1;
    36c4:	fe 01       	movw	r30, r28
    36c6:	e5 5b       	subi	r30, 0xB5	; 181
    36c8:	ff 4f       	sbci	r31, 0xFF	; 255
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	91 83       	std	Z+1, r25	; 0x01
    36d0:	80 83       	st	Z, r24
    36d2:	64 c0       	rjmp	.+200    	; 0x379c <main+0x352>
	else if (__tmp > 65535)
    36d4:	fe 01       	movw	r30, r28
    36d6:	e3 5b       	subi	r30, 0xB3	; 179
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	60 81       	ld	r22, Z
    36dc:	71 81       	ldd	r23, Z+1	; 0x01
    36de:	82 81       	ldd	r24, Z+2	; 0x02
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	20 e0       	ldi	r18, 0x00	; 0
    36e4:	3f ef       	ldi	r19, 0xFF	; 255
    36e6:	4f e7       	ldi	r20, 0x7F	; 127
    36e8:	57 e4       	ldi	r21, 0x47	; 71
    36ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ee:	18 16       	cp	r1, r24
    36f0:	0c f0       	brlt	.+2      	; 0x36f4 <main+0x2aa>
    36f2:	43 c0       	rjmp	.+134    	; 0x377a <main+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f4:	fe 01       	movw	r30, r28
    36f6:	ef 5a       	subi	r30, 0xAF	; 175
    36f8:	ff 4f       	sbci	r31, 0xFF	; 255
    36fa:	60 81       	ld	r22, Z
    36fc:	71 81       	ldd	r23, Z+1	; 0x01
    36fe:	82 81       	ldd	r24, Z+2	; 0x02
    3700:	93 81       	ldd	r25, Z+3	; 0x03
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	40 e2       	ldi	r20, 0x20	; 32
    3708:	51 e4       	ldi	r21, 0x41	; 65
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8e 01       	movw	r16, r28
    3714:	05 5b       	subi	r16, 0xB5	; 181
    3716:	1f 4f       	sbci	r17, 0xFF	; 255
    3718:	bc 01       	movw	r22, r24
    371a:	cd 01       	movw	r24, r26
    371c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	f8 01       	movw	r30, r16
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
    372a:	1f c0       	rjmp	.+62     	; 0x376a <main+0x320>
    372c:	fe 01       	movw	r30, r28
    372e:	e7 5b       	subi	r30, 0xB7	; 183
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	88 ec       	ldi	r24, 0xC8	; 200
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	91 83       	std	Z+1, r25	; 0x01
    3738:	80 83       	st	Z, r24
    373a:	fe 01       	movw	r30, r28
    373c:	e7 5b       	subi	r30, 0xB7	; 183
    373e:	ff 4f       	sbci	r31, 0xFF	; 255
    3740:	80 81       	ld	r24, Z
    3742:	91 81       	ldd	r25, Z+1	; 0x01
    3744:	01 97       	sbiw	r24, 0x01	; 1
    3746:	f1 f7       	brne	.-4      	; 0x3744 <main+0x2fa>
    3748:	fe 01       	movw	r30, r28
    374a:	e7 5b       	subi	r30, 0xB7	; 183
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3752:	de 01       	movw	r26, r28
    3754:	a5 5b       	subi	r26, 0xB5	; 181
    3756:	bf 4f       	sbci	r27, 0xFF	; 255
    3758:	fe 01       	movw	r30, r28
    375a:	e5 5b       	subi	r30, 0xB5	; 181
    375c:	ff 4f       	sbci	r31, 0xFF	; 255
    375e:	80 81       	ld	r24, Z
    3760:	91 81       	ldd	r25, Z+1	; 0x01
    3762:	01 97       	sbiw	r24, 0x01	; 1
    3764:	11 96       	adiw	r26, 0x01	; 1
    3766:	9c 93       	st	X, r25
    3768:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    376a:	fe 01       	movw	r30, r28
    376c:	e5 5b       	subi	r30, 0xB5	; 181
    376e:	ff 4f       	sbci	r31, 0xFF	; 255
    3770:	80 81       	ld	r24, Z
    3772:	91 81       	ldd	r25, Z+1	; 0x01
    3774:	00 97       	sbiw	r24, 0x00	; 0
    3776:	d1 f6       	brne	.-76     	; 0x372c <main+0x2e2>
    3778:	27 c0       	rjmp	.+78     	; 0x37c8 <main+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    377a:	8e 01       	movw	r16, r28
    377c:	05 5b       	subi	r16, 0xB5	; 181
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
    3780:	fe 01       	movw	r30, r28
    3782:	e3 5b       	subi	r30, 0xB3	; 179
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	f8 01       	movw	r30, r16
    3798:	91 83       	std	Z+1, r25	; 0x01
    379a:	80 83       	st	Z, r24
    379c:	de 01       	movw	r26, r28
    379e:	a9 5b       	subi	r26, 0xB9	; 185
    37a0:	bf 4f       	sbci	r27, 0xFF	; 255
    37a2:	fe 01       	movw	r30, r28
    37a4:	e5 5b       	subi	r30, 0xB5	; 181
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	80 81       	ld	r24, Z
    37aa:	91 81       	ldd	r25, Z+1	; 0x01
    37ac:	8d 93       	st	X+, r24
    37ae:	9c 93       	st	X, r25
    37b0:	fe 01       	movw	r30, r28
    37b2:	e9 5b       	subi	r30, 0xB9	; 185
    37b4:	ff 4f       	sbci	r31, 0xFF	; 255
    37b6:	80 81       	ld	r24, Z
    37b8:	91 81       	ldd	r25, Z+1	; 0x01
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <main+0x370>
    37be:	fe 01       	movw	r30, r28
    37c0:	e9 5b       	subi	r30, 0xB9	; 185
    37c2:	ff 4f       	sbci	r31, 0xFF	; 255
    37c4:	91 83       	std	Z+1, r25	; 0x01
    37c6:	80 83       	st	Z, r24
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    37c8:	81 e0       	ldi	r24, 0x01	; 1
    37ca:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
    37ce:	34 c0       	rjmp	.+104    	; 0x3838 <main+0x3ee>

	while(Local_u8Key !='=')
	{
		Password = Password*10+Local_u8Key;
    37d0:	fe 01       	movw	r30, r28
    37d2:	e7 59       	subi	r30, 0x97	; 151
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	80 81       	ld	r24, Z
    37d8:	88 2f       	mov	r24, r24
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9c 01       	movw	r18, r24
    37de:	22 0f       	add	r18, r18
    37e0:	33 1f       	adc	r19, r19
    37e2:	c9 01       	movw	r24, r18
    37e4:	88 0f       	add	r24, r24
    37e6:	99 1f       	adc	r25, r25
    37e8:	88 0f       	add	r24, r24
    37ea:	99 1f       	adc	r25, r25
    37ec:	82 0f       	add	r24, r18
    37ee:	93 1f       	adc	r25, r19
    37f0:	98 2f       	mov	r25, r24
    37f2:	de 01       	movw	r26, r28
    37f4:	a7 59       	subi	r26, 0x97	; 151
    37f6:	bf 4f       	sbci	r27, 0xFF	; 255
    37f8:	fe 01       	movw	r30, r28
    37fa:	e6 59       	subi	r30, 0x96	; 150
    37fc:	ff 4f       	sbci	r31, 0xFF	; 255
    37fe:	80 81       	ld	r24, Z
    3800:	89 0f       	add	r24, r25
    3802:	8c 93       	st	X, r24
		if(Flag_star!=0)
    3804:	fe 01       	movw	r30, r28
    3806:	e8 59       	subi	r30, 0x98	; 152
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	88 23       	and	r24, r24
    380e:	19 f0       	breq	.+6      	; 0x3816 <main+0x3cc>
		{
			HLCD_VoidSendChar('*');
    3810:	8a e2       	ldi	r24, 0x2A	; 42
    3812:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>
		}
		do
		{
			Local_u8Key=KPD_u8GetPressedKey();
    3816:	0e 94 5d 19 	call	0x32ba	; 0x32ba <KPD_u8GetPressedKey>
    381a:	fe 01       	movw	r30, r28
    381c:	e6 59       	subi	r30, 0x96	; 150
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	80 83       	st	Z, r24
			Flag_star=1;
    3822:	fe 01       	movw	r30, r28
    3824:	e8 59       	subi	r30, 0x98	; 152
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	80 83       	st	Z, r24
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    382c:	fe 01       	movw	r30, r28
    382e:	e6 59       	subi	r30, 0x96	; 150
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 81       	ld	r24, Z
    3834:	8f 3f       	cpi	r24, 0xFF	; 255
    3836:	79 f3       	breq	.-34     	; 0x3816 <main+0x3cc>

	HLCD_VoidSendString((u8*)"Enter Password");
	_delay_ms(1000);
	HLCD_VoidSendCommand(DISPLAYCLEAR);

	while(Local_u8Key !='=')
    3838:	fe 01       	movw	r30, r28
    383a:	e6 59       	subi	r30, 0x96	; 150
    383c:	ff 4f       	sbci	r31, 0xFF	; 255
    383e:	80 81       	ld	r24, Z
    3840:	8d 33       	cpi	r24, 0x3D	; 61
    3842:	31 f6       	brne	.-116    	; 0x37d0 <main+0x386>
	}

	while(1)
	{

		if(Password == 123)
    3844:	fe 01       	movw	r30, r28
    3846:	e7 59       	subi	r30, 0x97	; 151
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	80 81       	ld	r24, Z
    384c:	8b 37       	cpi	r24, 0x7B	; 123
    384e:	09 f0       	breq	.+2      	; 0x3852 <main+0x408>
    3850:	9b c2       	rjmp	.+1334   	; 0x3d88 <main+0x93e>
		{
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    3852:	81 e0       	ldi	r24, 0x01	; 1
    3854:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
			if(welcome_flag==0)
    3858:	fe 01       	movw	r30, r28
    385a:	ea 59       	subi	r30, 0x9A	; 154
    385c:	ff 4f       	sbci	r31, 0xFF	; 255
    385e:	80 81       	ld	r24, Z
    3860:	88 23       	and	r24, r24
    3862:	09 f0       	breq	.+2      	; 0x3866 <main+0x41c>
    3864:	94 c0       	rjmp	.+296    	; 0x398e <main+0x544>
			{
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
				HLCD_VoidSendString((u8*)"Welcome Ahmed ");
    386c:	8c e7       	ldi	r24, 0x7C	; 124
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    3874:	fe 01       	movw	r30, r28
    3876:	ed 5b       	subi	r30, 0xBD	; 189
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	aa e7       	ldi	r26, 0x7A	; 122
    3880:	b4 e4       	ldi	r27, 0x44	; 68
    3882:	80 83       	st	Z, r24
    3884:	91 83       	std	Z+1, r25	; 0x01
    3886:	a2 83       	std	Z+2, r26	; 0x02
    3888:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388a:	8e 01       	movw	r16, r28
    388c:	01 5c       	subi	r16, 0xC1	; 193
    388e:	1f 4f       	sbci	r17, 0xFF	; 255
    3890:	fe 01       	movw	r30, r28
    3892:	ed 5b       	subi	r30, 0xBD	; 189
    3894:	ff 4f       	sbci	r31, 0xFF	; 255
    3896:	60 81       	ld	r22, Z
    3898:	71 81       	ldd	r23, Z+1	; 0x01
    389a:	82 81       	ldd	r24, Z+2	; 0x02
    389c:	93 81       	ldd	r25, Z+3	; 0x03
    389e:	20 e0       	ldi	r18, 0x00	; 0
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	4a ef       	ldi	r20, 0xFA	; 250
    38a4:	54 e4       	ldi	r21, 0x44	; 68
    38a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38aa:	dc 01       	movw	r26, r24
    38ac:	cb 01       	movw	r24, r22
    38ae:	f8 01       	movw	r30, r16
    38b0:	80 83       	st	Z, r24
    38b2:	91 83       	std	Z+1, r25	; 0x01
    38b4:	a2 83       	std	Z+2, r26	; 0x02
    38b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38b8:	fe 01       	movw	r30, r28
    38ba:	ff 96       	adiw	r30, 0x3f	; 63
    38bc:	60 81       	ld	r22, Z
    38be:	71 81       	ldd	r23, Z+1	; 0x01
    38c0:	82 81       	ldd	r24, Z+2	; 0x02
    38c2:	93 81       	ldd	r25, Z+3	; 0x03
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	40 e8       	ldi	r20, 0x80	; 128
    38ca:	5f e3       	ldi	r21, 0x3F	; 63
    38cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38d0:	88 23       	and	r24, r24
    38d2:	2c f4       	brge	.+10     	; 0x38de <main+0x494>
		__ticks = 1;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	9e af       	std	Y+62, r25	; 0x3e
    38da:	8d af       	std	Y+61, r24	; 0x3d
    38dc:	46 c0       	rjmp	.+140    	; 0x396a <main+0x520>
	else if (__tmp > 65535)
    38de:	fe 01       	movw	r30, r28
    38e0:	ff 96       	adiw	r30, 0x3f	; 63
    38e2:	60 81       	ld	r22, Z
    38e4:	71 81       	ldd	r23, Z+1	; 0x01
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	93 81       	ldd	r25, Z+3	; 0x03
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	3f ef       	ldi	r19, 0xFF	; 255
    38ee:	4f e7       	ldi	r20, 0x7F	; 127
    38f0:	57 e4       	ldi	r21, 0x47	; 71
    38f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38f6:	18 16       	cp	r1, r24
    38f8:	64 f5       	brge	.+88     	; 0x3952 <main+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fa:	fe 01       	movw	r30, r28
    38fc:	ed 5b       	subi	r30, 0xBD	; 189
    38fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3900:	60 81       	ld	r22, Z
    3902:	71 81       	ldd	r23, Z+1	; 0x01
    3904:	82 81       	ldd	r24, Z+2	; 0x02
    3906:	93 81       	ldd	r25, Z+3	; 0x03
    3908:	20 e0       	ldi	r18, 0x00	; 0
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	40 e2       	ldi	r20, 0x20	; 32
    390e:	51 e4       	ldi	r21, 0x41	; 65
    3910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9e af       	std	Y+62, r25	; 0x3e
    3926:	8d af       	std	Y+61, r24	; 0x3d
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <main+0x4fe>
    392a:	88 ec       	ldi	r24, 0xC8	; 200
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9c af       	std	Y+60, r25	; 0x3c
    3930:	8b af       	std	Y+59, r24	; 0x3b
    3932:	8b ad       	ldd	r24, Y+59	; 0x3b
    3934:	9c ad       	ldd	r25, Y+60	; 0x3c
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <main+0x4ec>
    393a:	9c af       	std	Y+60, r25	; 0x3c
    393c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3940:	9e ad       	ldd	r25, Y+62	; 0x3e
    3942:	01 97       	sbiw	r24, 0x01	; 1
    3944:	9e af       	std	Y+62, r25	; 0x3e
    3946:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3948:	8d ad       	ldd	r24, Y+61	; 0x3d
    394a:	9e ad       	ldd	r25, Y+62	; 0x3e
    394c:	00 97       	sbiw	r24, 0x00	; 0
    394e:	69 f7       	brne	.-38     	; 0x392a <main+0x4e0>
    3950:	16 c0       	rjmp	.+44     	; 0x397e <main+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3952:	fe 01       	movw	r30, r28
    3954:	ff 96       	adiw	r30, 0x3f	; 63
    3956:	60 81       	ld	r22, Z
    3958:	71 81       	ldd	r23, Z+1	; 0x01
    395a:	82 81       	ldd	r24, Z+2	; 0x02
    395c:	93 81       	ldd	r25, Z+3	; 0x03
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	9e af       	std	Y+62, r25	; 0x3e
    3968:	8d af       	std	Y+61, r24	; 0x3d
    396a:	8d ad       	ldd	r24, Y+61	; 0x3d
    396c:	9e ad       	ldd	r25, Y+62	; 0x3e
    396e:	9a af       	std	Y+58, r25	; 0x3a
    3970:	89 af       	std	Y+57, r24	; 0x39
    3972:	89 ad       	ldd	r24, Y+57	; 0x39
    3974:	9a ad       	ldd	r25, Y+58	; 0x3a
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	f1 f7       	brne	.-4      	; 0x3976 <main+0x52c>
    397a:	9a af       	std	Y+58, r25	; 0x3a
    397c:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
				welcome_flag=1;
    3984:	fe 01       	movw	r30, r28
    3986:	ea 59       	subi	r30, 0x9A	; 154
    3988:	ff 4f       	sbci	r31, 0xFF	; 255
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	80 83       	st	Z, r24
			}

			if(Door_flag == 0)
    398e:	fe 01       	movw	r30, r28
    3990:	ed 59       	subi	r30, 0x9D	; 157
    3992:	ff 4f       	sbci	r31, 0xFF	; 255
    3994:	80 81       	ld	r24, Z
    3996:	88 23       	and	r24, r24
    3998:	29 f4       	brne	.+10     	; 0x39a4 <main+0x55a>
			{
				HLCD_VoidSendString((u8*)"1-Open door ");
    399a:	8b e8       	ldi	r24, 0x8B	; 139
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    39a2:	0a c0       	rjmp	.+20     	; 0x39b8 <main+0x56e>
			}
			else if(Door_flag ==1)
    39a4:	fe 01       	movw	r30, r28
    39a6:	ed 59       	subi	r30, 0x9D	; 157
    39a8:	ff 4f       	sbci	r31, 0xFF	; 255
    39aa:	80 81       	ld	r24, Z
    39ac:	81 30       	cpi	r24, 0x01	; 1
    39ae:	21 f4       	brne	.+8      	; 0x39b8 <main+0x56e>
			{
				HLCD_VoidSendString((u8*)"1-Close door ");
    39b0:	88 e9       	ldi	r24, 0x98	; 152
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
			}
			if(Fan_flag ==0)
    39b8:	fe 01       	movw	r30, r28
    39ba:	eb 59       	subi	r30, 0x9B	; 155
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	80 81       	ld	r24, Z
    39c0:	88 23       	and	r24, r24
    39c2:	49 f4       	brne	.+18     	; 0x39d6 <main+0x58c>
			{
				HLCD_VoidGotoXY(1,0);
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
				HLCD_VoidSendString((u8*)"2-OpenFan 3-More");
    39cc:	86 ea       	ldi	r24, 0xA6	; 166
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    39d4:	0e c0       	rjmp	.+28     	; 0x39f2 <main+0x5a8>
			}
			else if(Fan_flag ==1)
    39d6:	fe 01       	movw	r30, r28
    39d8:	eb 59       	subi	r30, 0x9B	; 155
    39da:	ff 4f       	sbci	r31, 0xFF	; 255
    39dc:	80 81       	ld	r24, Z
    39de:	81 30       	cpi	r24, 0x01	; 1
    39e0:	41 f4       	brne	.+16     	; 0x39f2 <main+0x5a8>
			{
				HLCD_VoidGotoXY(1,0);
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
				HLCD_VoidSendString((u8*)"2-CloseFan 3-More");
    39ea:	87 eb       	ldi	r24, 0xB7	; 183
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
			}
			Local_u8Key =KPD_NO_PRESSED_KEY;
    39f2:	fe 01       	movw	r30, r28
    39f4:	e6 59       	subi	r30, 0x96	; 150
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	8f ef       	ldi	r24, 0xFF	; 255
    39fa:	80 83       	st	Z, r24
			do
			{
				Local_u8Key=KPD_u8GetPressedKey();
    39fc:	0e 94 5d 19 	call	0x32ba	; 0x32ba <KPD_u8GetPressedKey>
    3a00:	fe 01       	movw	r30, r28
    3a02:	e6 59       	subi	r30, 0x96	; 150
    3a04:	ff 4f       	sbci	r31, 0xFF	; 255
    3a06:	80 83       	st	Z, r24
			}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e6 59       	subi	r30, 0x96	; 150
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	80 81       	ld	r24, Z
    3a10:	8f 3f       	cpi	r24, 0xFF	; 255
    3a12:	a1 f3       	breq	.-24     	; 0x39fc <main+0x5b2>
			if(Local_u8Key ==1 && Door_flag ==0)
    3a14:	fe 01       	movw	r30, r28
    3a16:	e6 59       	subi	r30, 0x96	; 150
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	80 81       	ld	r24, Z
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	79 f4       	brne	.+30     	; 0x3a3e <main+0x5f4>
    3a20:	fe 01       	movw	r30, r28
    3a22:	ed 59       	subi	r30, 0x9D	; 157
    3a24:	ff 4f       	sbci	r31, 0xFF	; 255
    3a26:	80 81       	ld	r24, Z
    3a28:	88 23       	and	r24, r24
    3a2a:	49 f4       	brne	.+18     	; 0x3a3e <main+0x5f4>
			{
				Servo_SetAngle(90);
    3a2c:	8a e5       	ldi	r24, 0x5A	; 90
    3a2e:	0e 94 65 12 	call	0x24ca	; 0x24ca <Servo_SetAngle>
				Door_flag =1;
    3a32:	fe 01       	movw	r30, r28
    3a34:	ed 59       	subi	r30, 0x9D	; 157
    3a36:	ff 4f       	sbci	r31, 0xFF	; 255
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	80 83       	st	Z, r24
    3a3c:	03 cf       	rjmp	.-506    	; 0x3844 <main+0x3fa>
			}
			else if(Local_u8Key ==1 && Door_flag ==1)
    3a3e:	fe 01       	movw	r30, r28
    3a40:	e6 59       	subi	r30, 0x96	; 150
    3a42:	ff 4f       	sbci	r31, 0xFF	; 255
    3a44:	80 81       	ld	r24, Z
    3a46:	81 30       	cpi	r24, 0x01	; 1
    3a48:	71 f4       	brne	.+28     	; 0x3a66 <main+0x61c>
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ed 59       	subi	r30, 0x9D	; 157
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	80 81       	ld	r24, Z
    3a52:	81 30       	cpi	r24, 0x01	; 1
    3a54:	41 f4       	brne	.+16     	; 0x3a66 <main+0x61c>
			{
				Servo_SetAngle(0);
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	0e 94 65 12 	call	0x24ca	; 0x24ca <Servo_SetAngle>
				Door_flag =0;
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	ed 59       	subi	r30, 0x9D	; 157
    3a60:	ff 4f       	sbci	r31, 0xFF	; 255
    3a62:	10 82       	st	Z, r1
    3a64:	ef ce       	rjmp	.-546    	; 0x3844 <main+0x3fa>
			}
			else if(Local_u8Key ==2 && Fan_flag ==0)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e6 59       	subi	r30, 0x96	; 150
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	82 30       	cpi	r24, 0x02	; 2
    3a70:	89 f4       	brne	.+34     	; 0x3a94 <main+0x64a>
    3a72:	fe 01       	movw	r30, r28
    3a74:	eb 59       	subi	r30, 0x9B	; 155
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	80 81       	ld	r24, Z
    3a7a:	88 23       	and	r24, r24
    3a7c:	59 f4       	brne	.+22     	; 0x3a94 <main+0x64a>
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_HIGH);
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	62 e0       	ldi	r22, 0x02	; 2
    3a82:	41 e0       	ldi	r20, 0x01	; 1
    3a84:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
				Fan_flag=1;
    3a88:	fe 01       	movw	r30, r28
    3a8a:	eb 59       	subi	r30, 0x9B	; 155
    3a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	80 83       	st	Z, r24
    3a92:	d8 ce       	rjmp	.-592    	; 0x3844 <main+0x3fa>
			}
			else if( Local_u8Key ==2 && Fan_flag ==1)
    3a94:	fe 01       	movw	r30, r28
    3a96:	e6 59       	subi	r30, 0x96	; 150
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	80 81       	ld	r24, Z
    3a9c:	82 30       	cpi	r24, 0x02	; 2
    3a9e:	81 f4       	brne	.+32     	; 0x3ac0 <main+0x676>
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	eb 59       	subi	r30, 0x9B	; 155
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	80 81       	ld	r24, Z
    3aa8:	81 30       	cpi	r24, 0x01	; 1
    3aaa:	51 f4       	brne	.+20     	; 0x3ac0 <main+0x676>
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_PIN_LOW);
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	62 e0       	ldi	r22, 0x02	; 2
    3ab0:	40 e0       	ldi	r20, 0x00	; 0
    3ab2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
				Fan_flag=0;
    3ab6:	fe 01       	movw	r30, r28
    3ab8:	eb 59       	subi	r30, 0x9B	; 155
    3aba:	ff 4f       	sbci	r31, 0xFF	; 255
    3abc:	10 82       	st	Z, r1
    3abe:	c2 ce       	rjmp	.-636    	; 0x3844 <main+0x3fa>
			}
			else if(Local_u8Key == 3)
    3ac0:	fe 01       	movw	r30, r28
    3ac2:	e6 59       	subi	r30, 0x96	; 150
    3ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac6:	80 81       	ld	r24, Z
    3ac8:	83 30       	cpi	r24, 0x03	; 3
    3aca:	09 f0       	breq	.+2      	; 0x3ace <main+0x684>
    3acc:	bb ce       	rjmp	.-650    	; 0x3844 <main+0x3fa>
			{

				HLCD_VoidSendCommand(DISPLAYCLEAR);
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
				if(LED_flag ==0)
    3ad4:	fe 01       	movw	r30, r28
    3ad6:	ec 59       	subi	r30, 0x9C	; 156
    3ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    3ada:	80 81       	ld	r24, Z
    3adc:	88 23       	and	r24, r24
    3ade:	29 f4       	brne	.+10     	; 0x3aea <main+0x6a0>
				{
					HLCD_VoidSendString((u8*)"4-Turn On LED");
    3ae0:	89 ec       	ldi	r24, 0xC9	; 201
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    3ae8:	0a c0       	rjmp	.+20     	; 0x3afe <main+0x6b4>
				}
				else if(LED_flag ==1)
    3aea:	fe 01       	movw	r30, r28
    3aec:	ec 59       	subi	r30, 0x9C	; 156
    3aee:	ff 4f       	sbci	r31, 0xFF	; 255
    3af0:	80 81       	ld	r24, Z
    3af2:	81 30       	cpi	r24, 0x01	; 1
    3af4:	21 f4       	brne	.+8      	; 0x3afe <main+0x6b4>
				{
					HLCD_VoidSendString((u8*)"4-Turn Off LED");
    3af6:	87 ed       	ldi	r24, 0xD7	; 215
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
				}
				HLCD_VoidGotoXY(1,0);
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
				HLCD_VoidSendString((u8*)"5-Temperature ");
    3b06:	86 ee       	ldi	r24, 0xE6	; 230
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
				Local_u8Key = KPD_NO_PRESSED_KEY;
    3b0e:	fe 01       	movw	r30, r28
    3b10:	e6 59       	subi	r30, 0x96	; 150
    3b12:	ff 4f       	sbci	r31, 0xFF	; 255
    3b14:	8f ef       	ldi	r24, 0xFF	; 255
    3b16:	80 83       	st	Z, r24
				do
				{
					Local_u8Key=KPD_u8GetPressedKey();
    3b18:	0e 94 5d 19 	call	0x32ba	; 0x32ba <KPD_u8GetPressedKey>
    3b1c:	fe 01       	movw	r30, r28
    3b1e:	e6 59       	subi	r30, 0x96	; 150
    3b20:	ff 4f       	sbci	r31, 0xFF	; 255
    3b22:	80 83       	st	Z, r24
				}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    3b24:	fe 01       	movw	r30, r28
    3b26:	e6 59       	subi	r30, 0x96	; 150
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 81       	ld	r24, Z
    3b2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b2e:	a1 f3       	breq	.-24     	; 0x3b18 <main+0x6ce>

				if(Local_u8Key == 4 && LED_flag ==0)
    3b30:	fe 01       	movw	r30, r28
    3b32:	e6 59       	subi	r30, 0x96	; 150
    3b34:	ff 4f       	sbci	r31, 0xFF	; 255
    3b36:	80 81       	ld	r24, Z
    3b38:	84 30       	cpi	r24, 0x04	; 4
    3b3a:	89 f4       	brne	.+34     	; 0x3b5e <main+0x714>
    3b3c:	fe 01       	movw	r30, r28
    3b3e:	ec 59       	subi	r30, 0x9C	; 156
    3b40:	ff 4f       	sbci	r31, 0xFF	; 255
    3b42:	80 81       	ld	r24, Z
    3b44:	88 23       	and	r24, r24
    3b46:	59 f4       	brne	.+22     	; 0x3b5e <main+0x714>
				{
					DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_HIGH);
    3b48:	80 e0       	ldi	r24, 0x00	; 0
    3b4a:	61 e0       	ldi	r22, 0x01	; 1
    3b4c:	41 e0       	ldi	r20, 0x01	; 1
    3b4e:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
					LED_flag =1;
    3b52:	fe 01       	movw	r30, r28
    3b54:	ec 59       	subi	r30, 0x9C	; 156
    3b56:	ff 4f       	sbci	r31, 0xFF	; 255
    3b58:	81 e0       	ldi	r24, 0x01	; 1
    3b5a:	80 83       	st	Z, r24
    3b5c:	73 ce       	rjmp	.-794    	; 0x3844 <main+0x3fa>
				}
				else if(Local_u8Key ==4 && LED_flag ==1)
    3b5e:	fe 01       	movw	r30, r28
    3b60:	e6 59       	subi	r30, 0x96	; 150
    3b62:	ff 4f       	sbci	r31, 0xFF	; 255
    3b64:	80 81       	ld	r24, Z
    3b66:	84 30       	cpi	r24, 0x04	; 4
    3b68:	81 f4       	brne	.+32     	; 0x3b8a <main+0x740>
    3b6a:	fe 01       	movw	r30, r28
    3b6c:	ec 59       	subi	r30, 0x9C	; 156
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	80 81       	ld	r24, Z
    3b72:	81 30       	cpi	r24, 0x01	; 1
    3b74:	51 f4       	brne	.+20     	; 0x3b8a <main+0x740>
				{
					DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_PIN_LOW);
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	61 e0       	ldi	r22, 0x01	; 1
    3b7a:	40 e0       	ldi	r20, 0x00	; 0
    3b7c:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <DIO_u8SetPinValue>
					LED_flag =0;
    3b80:	fe 01       	movw	r30, r28
    3b82:	ec 59       	subi	r30, 0x9C	; 156
    3b84:	ff 4f       	sbci	r31, 0xFF	; 255
    3b86:	10 82       	st	Z, r1
    3b88:	5d ce       	rjmp	.-838    	; 0x3844 <main+0x3fa>
				}
				else if(Local_u8Key ==5)
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e6 59       	subi	r30, 0x96	; 150
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	80 81       	ld	r24, Z
    3b92:	85 30       	cpi	r24, 0x05	; 5
    3b94:	09 f0       	breq	.+2      	; 0x3b98 <main+0x74e>
    3b96:	56 ce       	rjmp	.-852    	; 0x3844 <main+0x3fa>
				{
					HLCD_VoidSendCommand(DISPLAYCLEAR);
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
					ADC_u16StartConversionAsynchronous(0,APP);
    3b9e:	24 e3       	ldi	r18, 0x34	; 52
    3ba0:	30 e2       	ldi	r19, 0x20	; 32
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	b9 01       	movw	r22, r18
    3ba6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <ADC_u16StartConversionAsynchronous>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a8 ec       	ldi	r26, 0xC8	; 200
    3bb0:	b2 e4       	ldi	r27, 0x42	; 66
    3bb2:	8d ab       	std	Y+53, r24	; 0x35
    3bb4:	9e ab       	std	Y+54, r25	; 0x36
    3bb6:	af ab       	std	Y+55, r26	; 0x37
    3bb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6d a9       	ldd	r22, Y+53	; 0x35
    3bbc:	7e a9       	ldd	r23, Y+54	; 0x36
    3bbe:	8f a9       	ldd	r24, Y+55	; 0x37
    3bc0:	98 ad       	ldd	r25, Y+56	; 0x38
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a ef       	ldi	r20, 0xFA	; 250
    3bc8:	54 e4       	ldi	r21, 0x44	; 68
    3bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	89 ab       	std	Y+49, r24	; 0x31
    3bd4:	9a ab       	std	Y+50, r25	; 0x32
    3bd6:	ab ab       	std	Y+51, r26	; 0x33
    3bd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3bda:	69 a9       	ldd	r22, Y+49	; 0x31
    3bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    3bde:	8b a9       	ldd	r24, Y+51	; 0x33
    3be0:	9c a9       	ldd	r25, Y+52	; 0x34
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <main+0x7b2>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	98 ab       	std	Y+48, r25	; 0x30
    3bf8:	8f a7       	std	Y+47, r24	; 0x2f
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <main+0x830>
	else if (__tmp > 65535)
    3bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    3bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    3c00:	8b a9       	ldd	r24, Y+51	; 0x33
    3c02:	9c a9       	ldd	r25, Y+52	; 0x34
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <main+0x81c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6d a9       	ldd	r22, Y+53	; 0x35
    3c16:	7e a9       	ldd	r23, Y+54	; 0x36
    3c18:	8f a9       	ldd	r24, Y+55	; 0x37
    3c1a:	98 ad       	ldd	r25, Y+56	; 0x38
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	98 ab       	std	Y+48, r25	; 0x30
    3c3a:	8f a7       	std	Y+47, r24	; 0x2f
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <main+0x812>
    3c3e:	88 ec       	ldi	r24, 0xC8	; 200
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	9e a7       	std	Y+46, r25	; 0x2e
    3c44:	8d a7       	std	Y+45, r24	; 0x2d
    3c46:	8d a5       	ldd	r24, Y+45	; 0x2d
    3c48:	9e a5       	ldd	r25, Y+46	; 0x2e
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <main+0x800>
    3c4e:	9e a7       	std	Y+46, r25	; 0x2e
    3c50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c54:	98 a9       	ldd	r25, Y+48	; 0x30
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	98 ab       	std	Y+48, r25	; 0x30
    3c5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <main+0x7f4>
    3c64:	14 c0       	rjmp	.+40     	; 0x3c8e <main+0x844>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	69 a9       	ldd	r22, Y+49	; 0x31
    3c68:	7a a9       	ldd	r23, Y+50	; 0x32
    3c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    3c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    3c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	98 ab       	std	Y+48, r25	; 0x30
    3c78:	8f a7       	std	Y+47, r24	; 0x2f
    3c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    3c7e:	9c a7       	std	Y+44, r25	; 0x2c
    3c80:	8b a7       	std	Y+43, r24	; 0x2b
    3c82:	8b a5       	ldd	r24, Y+43	; 0x2b
    3c84:	9c a5       	ldd	r25, Y+44	; 0x2c
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <main+0x83c>
    3c8a:	9c a7       	std	Y+44, r25	; 0x2c
    3c8c:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(100);
					HLCD_VoidSendString((u8*)"Temp =  ");
    3c8e:	85 ef       	ldi	r24, 0xF5	; 245
    3c90:	90 e0       	ldi	r25, 0x00	; 0
    3c92:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
					HLCD_VoidSendNumber(temp);
    3c96:	80 91 6d 01 	lds	r24, 0x016D
    3c9a:	88 2f       	mov	r24, r24
    3c9c:	90 e0       	ldi	r25, 0x00	; 0
    3c9e:	0e 94 a4 18 	call	0x3148	; 0x3148 <HLCD_VoidSendNumber>
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	aa e7       	ldi	r26, 0x7A	; 122
    3ca8:	b4 e4       	ldi	r27, 0x44	; 68
    3caa:	8f a3       	std	Y+39, r24	; 0x27
    3cac:	98 a7       	std	Y+40, r25	; 0x28
    3cae:	a9 a7       	std	Y+41, r26	; 0x29
    3cb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cb2:	6f a1       	ldd	r22, Y+39	; 0x27
    3cb4:	78 a5       	ldd	r23, Y+40	; 0x28
    3cb6:	89 a5       	ldd	r24, Y+41	; 0x29
    3cb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	4a ef       	ldi	r20, 0xFA	; 250
    3cc0:	54 e4       	ldi	r21, 0x44	; 68
    3cc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	8b a3       	std	Y+35, r24	; 0x23
    3ccc:	9c a3       	std	Y+36, r25	; 0x24
    3cce:	ad a3       	std	Y+37, r26	; 0x25
    3cd0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3cd2:	6b a1       	ldd	r22, Y+35	; 0x23
    3cd4:	7c a1       	ldd	r23, Y+36	; 0x24
    3cd6:	8d a1       	ldd	r24, Y+37	; 0x25
    3cd8:	9e a1       	ldd	r25, Y+38	; 0x26
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e8       	ldi	r20, 0x80	; 128
    3ce0:	5f e3       	ldi	r21, 0x3F	; 63
    3ce2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ce6:	88 23       	and	r24, r24
    3ce8:	2c f4       	brge	.+10     	; 0x3cf4 <main+0x8aa>
		__ticks = 1;
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	9a a3       	std	Y+34, r25	; 0x22
    3cf0:	89 a3       	std	Y+33, r24	; 0x21
    3cf2:	3f c0       	rjmp	.+126    	; 0x3d72 <main+0x928>
	else if (__tmp > 65535)
    3cf4:	6b a1       	ldd	r22, Y+35	; 0x23
    3cf6:	7c a1       	ldd	r23, Y+36	; 0x24
    3cf8:	8d a1       	ldd	r24, Y+37	; 0x25
    3cfa:	9e a1       	ldd	r25, Y+38	; 0x26
    3cfc:	20 e0       	ldi	r18, 0x00	; 0
    3cfe:	3f ef       	ldi	r19, 0xFF	; 255
    3d00:	4f e7       	ldi	r20, 0x7F	; 127
    3d02:	57 e4       	ldi	r21, 0x47	; 71
    3d04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d08:	18 16       	cp	r1, r24
    3d0a:	4c f5       	brge	.+82     	; 0x3d5e <main+0x914>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d0c:	6f a1       	ldd	r22, Y+39	; 0x27
    3d0e:	78 a5       	ldd	r23, Y+40	; 0x28
    3d10:	89 a5       	ldd	r24, Y+41	; 0x29
    3d12:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	40 e2       	ldi	r20, 0x20	; 32
    3d1a:	51 e4       	ldi	r21, 0x41	; 65
    3d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d20:	dc 01       	movw	r26, r24
    3d22:	cb 01       	movw	r24, r22
    3d24:	bc 01       	movw	r22, r24
    3d26:	cd 01       	movw	r24, r26
    3d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d2c:	dc 01       	movw	r26, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	9a a3       	std	Y+34, r25	; 0x22
    3d32:	89 a3       	std	Y+33, r24	; 0x21
    3d34:	0f c0       	rjmp	.+30     	; 0x3d54 <main+0x90a>
    3d36:	88 ec       	ldi	r24, 0xC8	; 200
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	98 a3       	std	Y+32, r25	; 0x20
    3d3c:	8f 8f       	std	Y+31, r24	; 0x1f
    3d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3d40:	98 a1       	ldd	r25, Y+32	; 0x20
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <main+0x8f8>
    3d46:	98 a3       	std	Y+32, r25	; 0x20
    3d48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    3d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	9a a3       	std	Y+34, r25	; 0x22
    3d52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d54:	89 a1       	ldd	r24, Y+33	; 0x21
    3d56:	9a a1       	ldd	r25, Y+34	; 0x22
    3d58:	00 97       	sbiw	r24, 0x00	; 0
    3d5a:	69 f7       	brne	.-38     	; 0x3d36 <main+0x8ec>
    3d5c:	73 cd       	rjmp	.-1306   	; 0x3844 <main+0x3fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d5e:	6b a1       	ldd	r22, Y+35	; 0x23
    3d60:	7c a1       	ldd	r23, Y+36	; 0x24
    3d62:	8d a1       	ldd	r24, Y+37	; 0x25
    3d64:	9e a1       	ldd	r25, Y+38	; 0x26
    3d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6a:	dc 01       	movw	r26, r24
    3d6c:	cb 01       	movw	r24, r22
    3d6e:	9a a3       	std	Y+34, r25	; 0x22
    3d70:	89 a3       	std	Y+33, r24	; 0x21
    3d72:	89 a1       	ldd	r24, Y+33	; 0x21
    3d74:	9a a1       	ldd	r25, Y+34	; 0x22
    3d76:	9e 8f       	std	Y+30, r25	; 0x1e
    3d78:	8d 8f       	std	Y+29, r24	; 0x1d
    3d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3d7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <main+0x934>
    3d82:	9e 8f       	std	Y+30, r25	; 0x1e
    3d84:	8d 8f       	std	Y+29, r24	; 0x1d
    3d86:	5e cd       	rjmp	.-1348   	; 0x3844 <main+0x3fa>
				}

			}

		}
		else if(Password != 123 && number_of_tries <2)
    3d88:	fe 01       	movw	r30, r28
    3d8a:	e7 59       	subi	r30, 0x97	; 151
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 81       	ld	r24, Z
    3d90:	8b 37       	cpi	r24, 0x7B	; 123
    3d92:	09 f4       	brne	.+2      	; 0x3d96 <main+0x94c>
    3d94:	4d c1       	rjmp	.+666    	; 0x4030 <main+0xbe6>
    3d96:	fe 01       	movw	r30, r28
    3d98:	e9 59       	subi	r30, 0x99	; 153
    3d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9c:	80 81       	ld	r24, Z
    3d9e:	82 30       	cpi	r24, 0x02	; 2
    3da0:	08 f0       	brcs	.+2      	; 0x3da4 <main+0x95a>
    3da2:	46 c1       	rjmp	.+652    	; 0x4030 <main+0xbe6>
		{
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    3da4:	81 e0       	ldi	r24, 0x01	; 1
    3da6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
			HLCD_VoidSendString((u8*)"Wrong password");
    3daa:	8e ef       	ldi	r24, 0xFE	; 254
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	aa ef       	ldi	r26, 0xFA	; 250
    3db8:	b3 e4       	ldi	r27, 0x43	; 67
    3dba:	89 8f       	std	Y+25, r24	; 0x19
    3dbc:	9a 8f       	std	Y+26, r25	; 0x1a
    3dbe:	ab 8f       	std	Y+27, r26	; 0x1b
    3dc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dc2:	69 8d       	ldd	r22, Y+25	; 0x19
    3dc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3dc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3dc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3dca:	20 e0       	ldi	r18, 0x00	; 0
    3dcc:	30 e0       	ldi	r19, 0x00	; 0
    3dce:	4a ef       	ldi	r20, 0xFA	; 250
    3dd0:	54 e4       	ldi	r21, 0x44	; 68
    3dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd6:	dc 01       	movw	r26, r24
    3dd8:	cb 01       	movw	r24, r22
    3dda:	8d 8b       	std	Y+21, r24	; 0x15
    3ddc:	9e 8b       	std	Y+22, r25	; 0x16
    3dde:	af 8b       	std	Y+23, r26	; 0x17
    3de0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3de2:	6d 89       	ldd	r22, Y+21	; 0x15
    3de4:	7e 89       	ldd	r23, Y+22	; 0x16
    3de6:	8f 89       	ldd	r24, Y+23	; 0x17
    3de8:	98 8d       	ldd	r25, Y+24	; 0x18
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	40 e8       	ldi	r20, 0x80	; 128
    3df0:	5f e3       	ldi	r21, 0x3F	; 63
    3df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3df6:	88 23       	and	r24, r24
    3df8:	2c f4       	brge	.+10     	; 0x3e04 <main+0x9ba>
		__ticks = 1;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	9c 8b       	std	Y+20, r25	; 0x14
    3e00:	8b 8b       	std	Y+19, r24	; 0x13
    3e02:	3f c0       	rjmp	.+126    	; 0x3e82 <main+0xa38>
	else if (__tmp > 65535)
    3e04:	6d 89       	ldd	r22, Y+21	; 0x15
    3e06:	7e 89       	ldd	r23, Y+22	; 0x16
    3e08:	8f 89       	ldd	r24, Y+23	; 0x17
    3e0a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e0c:	20 e0       	ldi	r18, 0x00	; 0
    3e0e:	3f ef       	ldi	r19, 0xFF	; 255
    3e10:	4f e7       	ldi	r20, 0x7F	; 127
    3e12:	57 e4       	ldi	r21, 0x47	; 71
    3e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e18:	18 16       	cp	r1, r24
    3e1a:	4c f5       	brge	.+82     	; 0x3e6e <main+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    3e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	40 e2       	ldi	r20, 0x20	; 32
    3e2a:	51 e4       	ldi	r21, 0x41	; 65
    3e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e30:	dc 01       	movw	r26, r24
    3e32:	cb 01       	movw	r24, r22
    3e34:	bc 01       	movw	r22, r24
    3e36:	cd 01       	movw	r24, r26
    3e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	9c 8b       	std	Y+20, r25	; 0x14
    3e42:	8b 8b       	std	Y+19, r24	; 0x13
    3e44:	0f c0       	rjmp	.+30     	; 0x3e64 <main+0xa1a>
    3e46:	88 ec       	ldi	r24, 0xC8	; 200
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	9a 8b       	std	Y+18, r25	; 0x12
    3e4c:	89 8b       	std	Y+17, r24	; 0x11
    3e4e:	89 89       	ldd	r24, Y+17	; 0x11
    3e50:	9a 89       	ldd	r25, Y+18	; 0x12
    3e52:	01 97       	sbiw	r24, 0x01	; 1
    3e54:	f1 f7       	brne	.-4      	; 0x3e52 <main+0xa08>
    3e56:	9a 8b       	std	Y+18, r25	; 0x12
    3e58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e5a:	8b 89       	ldd	r24, Y+19	; 0x13
    3e5c:	9c 89       	ldd	r25, Y+20	; 0x14
    3e5e:	01 97       	sbiw	r24, 0x01	; 1
    3e60:	9c 8b       	std	Y+20, r25	; 0x14
    3e62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e64:	8b 89       	ldd	r24, Y+19	; 0x13
    3e66:	9c 89       	ldd	r25, Y+20	; 0x14
    3e68:	00 97       	sbiw	r24, 0x00	; 0
    3e6a:	69 f7       	brne	.-38     	; 0x3e46 <main+0x9fc>
    3e6c:	14 c0       	rjmp	.+40     	; 0x3e96 <main+0xa4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e6e:	6d 89       	ldd	r22, Y+21	; 0x15
    3e70:	7e 89       	ldd	r23, Y+22	; 0x16
    3e72:	8f 89       	ldd	r24, Y+23	; 0x17
    3e74:	98 8d       	ldd	r25, Y+24	; 0x18
    3e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e7a:	dc 01       	movw	r26, r24
    3e7c:	cb 01       	movw	r24, r22
    3e7e:	9c 8b       	std	Y+20, r25	; 0x14
    3e80:	8b 8b       	std	Y+19, r24	; 0x13
    3e82:	8b 89       	ldd	r24, Y+19	; 0x13
    3e84:	9c 89       	ldd	r25, Y+20	; 0x14
    3e86:	98 8b       	std	Y+16, r25	; 0x10
    3e88:	8f 87       	std	Y+15, r24	; 0x0f
    3e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e8c:	98 89       	ldd	r25, Y+16	; 0x10
    3e8e:	01 97       	sbiw	r24, 0x01	; 1
    3e90:	f1 f7       	brne	.-4      	; 0x3e8e <main+0xa44>
    3e92:	98 8b       	std	Y+16, r25	; 0x10
    3e94:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
			HLCD_VoidSendString((u8*)"Try again");
    3e9c:	8d e0       	ldi	r24, 0x0D	; 13
    3e9e:	91 e0       	ldi	r25, 0x01	; 1
    3ea0:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	aa ef       	ldi	r26, 0xFA	; 250
    3eaa:	b3 e4       	ldi	r27, 0x43	; 67
    3eac:	8b 87       	std	Y+11, r24	; 0x0b
    3eae:	9c 87       	std	Y+12, r25	; 0x0c
    3eb0:	ad 87       	std	Y+13, r26	; 0x0d
    3eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	30 e0       	ldi	r19, 0x00	; 0
    3ec0:	4a ef       	ldi	r20, 0xFA	; 250
    3ec2:	54 e4       	ldi	r21, 0x44	; 68
    3ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	8f 83       	std	Y+7, r24	; 0x07
    3ece:	98 87       	std	Y+8, r25	; 0x08
    3ed0:	a9 87       	std	Y+9, r26	; 0x09
    3ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ed6:	78 85       	ldd	r23, Y+8	; 0x08
    3ed8:	89 85       	ldd	r24, Y+9	; 0x09
    3eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3edc:	20 e0       	ldi	r18, 0x00	; 0
    3ede:	30 e0       	ldi	r19, 0x00	; 0
    3ee0:	40 e8       	ldi	r20, 0x80	; 128
    3ee2:	5f e3       	ldi	r21, 0x3F	; 63
    3ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ee8:	88 23       	and	r24, r24
    3eea:	2c f4       	brge	.+10     	; 0x3ef6 <main+0xaac>
		__ticks = 1;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	9e 83       	std	Y+6, r25	; 0x06
    3ef2:	8d 83       	std	Y+5, r24	; 0x05
    3ef4:	3f c0       	rjmp	.+126    	; 0x3f74 <main+0xb2a>
	else if (__tmp > 65535)
    3ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ef8:	78 85       	ldd	r23, Y+8	; 0x08
    3efa:	89 85       	ldd	r24, Y+9	; 0x09
    3efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	3f ef       	ldi	r19, 0xFF	; 255
    3f02:	4f e7       	ldi	r20, 0x7F	; 127
    3f04:	57 e4       	ldi	r21, 0x47	; 71
    3f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f0a:	18 16       	cp	r1, r24
    3f0c:	4c f5       	brge	.+82     	; 0x3f60 <main+0xb16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f22:	dc 01       	movw	r26, r24
    3f24:	cb 01       	movw	r24, r22
    3f26:	bc 01       	movw	r22, r24
    3f28:	cd 01       	movw	r24, r26
    3f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2e:	dc 01       	movw	r26, r24
    3f30:	cb 01       	movw	r24, r22
    3f32:	9e 83       	std	Y+6, r25	; 0x06
    3f34:	8d 83       	std	Y+5, r24	; 0x05
    3f36:	0f c0       	rjmp	.+30     	; 0x3f56 <main+0xb0c>
    3f38:	88 ec       	ldi	r24, 0xC8	; 200
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	9c 83       	std	Y+4, r25	; 0x04
    3f3e:	8b 83       	std	Y+3, r24	; 0x03
    3f40:	8b 81       	ldd	r24, Y+3	; 0x03
    3f42:	9c 81       	ldd	r25, Y+4	; 0x04
    3f44:	01 97       	sbiw	r24, 0x01	; 1
    3f46:	f1 f7       	brne	.-4      	; 0x3f44 <main+0xafa>
    3f48:	9c 83       	std	Y+4, r25	; 0x04
    3f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3f50:	01 97       	sbiw	r24, 0x01	; 1
    3f52:	9e 83       	std	Y+6, r25	; 0x06
    3f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f56:	8d 81       	ldd	r24, Y+5	; 0x05
    3f58:	9e 81       	ldd	r25, Y+6	; 0x06
    3f5a:	00 97       	sbiw	r24, 0x00	; 0
    3f5c:	69 f7       	brne	.-38     	; 0x3f38 <main+0xaee>
    3f5e:	14 c0       	rjmp	.+40     	; 0x3f88 <main+0xb3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f60:	6f 81       	ldd	r22, Y+7	; 0x07
    3f62:	78 85       	ldd	r23, Y+8	; 0x08
    3f64:	89 85       	ldd	r24, Y+9	; 0x09
    3f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6c:	dc 01       	movw	r26, r24
    3f6e:	cb 01       	movw	r24, r22
    3f70:	9e 83       	std	Y+6, r25	; 0x06
    3f72:	8d 83       	std	Y+5, r24	; 0x05
    3f74:	8d 81       	ldd	r24, Y+5	; 0x05
    3f76:	9e 81       	ldd	r25, Y+6	; 0x06
    3f78:	9a 83       	std	Y+2, r25	; 0x02
    3f7a:	89 83       	std	Y+1, r24	; 0x01
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	f1 f7       	brne	.-4      	; 0x3f80 <main+0xb36>
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
			Password=0;
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e7 59       	subi	r30, 0x97	; 151
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	10 82       	st	Z, r1
			Local_u8Key =0;
    3f96:	fe 01       	movw	r30, r28
    3f98:	e6 59       	subi	r30, 0x96	; 150
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	10 82       	st	Z, r1
			Flag_star =0;
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e8 59       	subi	r30, 0x98	; 152
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	10 82       	st	Z, r1
    3fa6:	34 c0       	rjmp	.+104    	; 0x4010 <main+0xbc6>
			while(Local_u8Key !='=')
			{
				Password = Password*10+Local_u8Key;
    3fa8:	fe 01       	movw	r30, r28
    3faa:	e7 59       	subi	r30, 0x97	; 151
    3fac:	ff 4f       	sbci	r31, 0xFF	; 255
    3fae:	80 81       	ld	r24, Z
    3fb0:	88 2f       	mov	r24, r24
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9c 01       	movw	r18, r24
    3fb6:	22 0f       	add	r18, r18
    3fb8:	33 1f       	adc	r19, r19
    3fba:	c9 01       	movw	r24, r18
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	82 0f       	add	r24, r18
    3fc6:	93 1f       	adc	r25, r19
    3fc8:	98 2f       	mov	r25, r24
    3fca:	de 01       	movw	r26, r28
    3fcc:	a7 59       	subi	r26, 0x97	; 151
    3fce:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e6 59       	subi	r30, 0x96	; 150
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	89 0f       	add	r24, r25
    3fda:	8c 93       	st	X, r24
				if(Flag_star!=0)
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e8 59       	subi	r30, 0x98	; 152
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	80 81       	ld	r24, Z
    3fe4:	88 23       	and	r24, r24
    3fe6:	19 f0       	breq	.+6      	; 0x3fee <main+0xba4>
				{
					HLCD_VoidSendChar('*');
    3fe8:	8a e2       	ldi	r24, 0x2A	; 42
    3fea:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <HLCD_VoidSendChar>
				}
				do
				{
					Local_u8Key=KPD_u8GetPressedKey();
    3fee:	0e 94 5d 19 	call	0x32ba	; 0x32ba <KPD_u8GetPressedKey>
    3ff2:	fe 01       	movw	r30, r28
    3ff4:	e6 59       	subi	r30, 0x96	; 150
    3ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff8:	80 83       	st	Z, r24
					Flag_star=1;
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e8 59       	subi	r30, 0x98	; 152
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	81 e0       	ldi	r24, 0x01	; 1
    4002:	80 83       	st	Z, r24
				}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    4004:	fe 01       	movw	r30, r28
    4006:	e6 59       	subi	r30, 0x96	; 150
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	80 81       	ld	r24, Z
    400c:	8f 3f       	cpi	r24, 0xFF	; 255
    400e:	79 f3       	breq	.-34     	; 0x3fee <main+0xba4>
			_delay_ms(500);
			HLCD_VoidSendCommand(DISPLAYCLEAR);
			Password=0;
			Local_u8Key =0;
			Flag_star =0;
			while(Local_u8Key !='=')
    4010:	fe 01       	movw	r30, r28
    4012:	e6 59       	subi	r30, 0x96	; 150
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	80 81       	ld	r24, Z
    4018:	8d 33       	cpi	r24, 0x3D	; 61
    401a:	31 f6       	brne	.-116    	; 0x3fa8 <main+0xb5e>
					Local_u8Key=KPD_u8GetPressedKey();
					Flag_star=1;
				}while(Local_u8Key==KPD_NO_PRESSED_KEY );

			}
			number_of_tries++;
    401c:	de 01       	movw	r26, r28
    401e:	a9 59       	subi	r26, 0x99	; 153
    4020:	bf 4f       	sbci	r27, 0xFF	; 255
    4022:	fe 01       	movw	r30, r28
    4024:	e9 59       	subi	r30, 0x99	; 153
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	80 81       	ld	r24, Z
    402a:	8f 5f       	subi	r24, 0xFF	; 255
    402c:	8c 93       	st	X, r24
    402e:	0a cc       	rjmp	.-2028   	; 0x3844 <main+0x3fa>
		}
		else
		{
			if(welcome_flag ==0)
    4030:	fe 01       	movw	r30, r28
    4032:	ea 59       	subi	r30, 0x9A	; 154
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	80 81       	ld	r24, Z
    4038:	88 23       	and	r24, r24
    403a:	09 f0       	breq	.+2      	; 0x403e <main+0xbf4>
    403c:	03 cc       	rjmp	.-2042   	; 0x3844 <main+0x3fa>
			{
				HLCD_VoidSendCommand(DISPLAYCLEAR);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <HLCD_VoidSendCommand>
				HLCD_VoidSendString((u8*)"exceed ");
    4044:	87 e1       	ldi	r24, 0x17	; 23
    4046:	91 e0       	ldi	r25, 0x01	; 1
    4048:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
				HLCD_VoidGotoXY(1,0);
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	60 e0       	ldi	r22, 0x00	; 0
    4050:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
				HLCD_VoidSendString((u8*)"valid tries");
    4054:	8f e1       	ldi	r24, 0x1F	; 31
    4056:	91 e0       	ldi	r25, 0x01	; 1
    4058:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <HLCD_VoidSendString>
				welcome_flag =1;
    405c:	fe 01       	movw	r30, r28
    405e:	ea 59       	subi	r30, 0x9A	; 154
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	80 83       	st	Z, r24
    4066:	ee cb       	rjmp	.-2084   	; 0x3844 <main+0x3fa>

00004068 <APP>:
			}
		}
	}
}
void APP(void)
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
	HLCD_VoidGotoXY(0,0);
    4070:	80 e0       	ldi	r24, 0x00	; 0
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	0e 94 03 19 	call	0x3206	; 0x3206 <HLCD_VoidGotoXY>
	volt =ADC_GetVolt();
    4078:	0e 94 2c 12 	call	0x2458	; 0x2458 <ADC_GetVolt>
    407c:	90 93 6f 01 	sts	0x016F, r25
    4080:	80 93 6e 01 	sts	0x016E, r24
	temp = volt /10;
    4084:	80 91 6e 01 	lds	r24, 0x016E
    4088:	90 91 6f 01 	lds	r25, 0x016F
    408c:	2a e0       	ldi	r18, 0x0A	; 10
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	b9 01       	movw	r22, r18
    4092:	0e 94 70 20 	call	0x40e0	; 0x40e0 <__udivmodhi4>
    4096:	cb 01       	movw	r24, r22
    4098:	80 93 6d 01 	sts	0x016D, r24
}
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <__mulsi3>:
    40a2:	62 9f       	mul	r22, r18
    40a4:	d0 01       	movw	r26, r0
    40a6:	73 9f       	mul	r23, r19
    40a8:	f0 01       	movw	r30, r0
    40aa:	82 9f       	mul	r24, r18
    40ac:	e0 0d       	add	r30, r0
    40ae:	f1 1d       	adc	r31, r1
    40b0:	64 9f       	mul	r22, r20
    40b2:	e0 0d       	add	r30, r0
    40b4:	f1 1d       	adc	r31, r1
    40b6:	92 9f       	mul	r25, r18
    40b8:	f0 0d       	add	r31, r0
    40ba:	83 9f       	mul	r24, r19
    40bc:	f0 0d       	add	r31, r0
    40be:	74 9f       	mul	r23, r20
    40c0:	f0 0d       	add	r31, r0
    40c2:	65 9f       	mul	r22, r21
    40c4:	f0 0d       	add	r31, r0
    40c6:	99 27       	eor	r25, r25
    40c8:	72 9f       	mul	r23, r18
    40ca:	b0 0d       	add	r27, r0
    40cc:	e1 1d       	adc	r30, r1
    40ce:	f9 1f       	adc	r31, r25
    40d0:	63 9f       	mul	r22, r19
    40d2:	b0 0d       	add	r27, r0
    40d4:	e1 1d       	adc	r30, r1
    40d6:	f9 1f       	adc	r31, r25
    40d8:	bd 01       	movw	r22, r26
    40da:	cf 01       	movw	r24, r30
    40dc:	11 24       	eor	r1, r1
    40de:	08 95       	ret

000040e0 <__udivmodhi4>:
    40e0:	aa 1b       	sub	r26, r26
    40e2:	bb 1b       	sub	r27, r27
    40e4:	51 e1       	ldi	r21, 0x11	; 17
    40e6:	07 c0       	rjmp	.+14     	; 0x40f6 <__udivmodhi4_ep>

000040e8 <__udivmodhi4_loop>:
    40e8:	aa 1f       	adc	r26, r26
    40ea:	bb 1f       	adc	r27, r27
    40ec:	a6 17       	cp	r26, r22
    40ee:	b7 07       	cpc	r27, r23
    40f0:	10 f0       	brcs	.+4      	; 0x40f6 <__udivmodhi4_ep>
    40f2:	a6 1b       	sub	r26, r22
    40f4:	b7 0b       	sbc	r27, r23

000040f6 <__udivmodhi4_ep>:
    40f6:	88 1f       	adc	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	5a 95       	dec	r21
    40fc:	a9 f7       	brne	.-22     	; 0x40e8 <__udivmodhi4_loop>
    40fe:	80 95       	com	r24
    4100:	90 95       	com	r25
    4102:	bc 01       	movw	r22, r24
    4104:	cd 01       	movw	r24, r26
    4106:	08 95       	ret

00004108 <__prologue_saves__>:
    4108:	2f 92       	push	r2
    410a:	3f 92       	push	r3
    410c:	4f 92       	push	r4
    410e:	5f 92       	push	r5
    4110:	6f 92       	push	r6
    4112:	7f 92       	push	r7
    4114:	8f 92       	push	r8
    4116:	9f 92       	push	r9
    4118:	af 92       	push	r10
    411a:	bf 92       	push	r11
    411c:	cf 92       	push	r12
    411e:	df 92       	push	r13
    4120:	ef 92       	push	r14
    4122:	ff 92       	push	r15
    4124:	0f 93       	push	r16
    4126:	1f 93       	push	r17
    4128:	cf 93       	push	r28
    412a:	df 93       	push	r29
    412c:	cd b7       	in	r28, 0x3d	; 61
    412e:	de b7       	in	r29, 0x3e	; 62
    4130:	ca 1b       	sub	r28, r26
    4132:	db 0b       	sbc	r29, r27
    4134:	0f b6       	in	r0, 0x3f	; 63
    4136:	f8 94       	cli
    4138:	de bf       	out	0x3e, r29	; 62
    413a:	0f be       	out	0x3f, r0	; 63
    413c:	cd bf       	out	0x3d, r28	; 61
    413e:	09 94       	ijmp

00004140 <__epilogue_restores__>:
    4140:	2a 88       	ldd	r2, Y+18	; 0x12
    4142:	39 88       	ldd	r3, Y+17	; 0x11
    4144:	48 88       	ldd	r4, Y+16	; 0x10
    4146:	5f 84       	ldd	r5, Y+15	; 0x0f
    4148:	6e 84       	ldd	r6, Y+14	; 0x0e
    414a:	7d 84       	ldd	r7, Y+13	; 0x0d
    414c:	8c 84       	ldd	r8, Y+12	; 0x0c
    414e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4150:	aa 84       	ldd	r10, Y+10	; 0x0a
    4152:	b9 84       	ldd	r11, Y+9	; 0x09
    4154:	c8 84       	ldd	r12, Y+8	; 0x08
    4156:	df 80       	ldd	r13, Y+7	; 0x07
    4158:	ee 80       	ldd	r14, Y+6	; 0x06
    415a:	fd 80       	ldd	r15, Y+5	; 0x05
    415c:	0c 81       	ldd	r16, Y+4	; 0x04
    415e:	1b 81       	ldd	r17, Y+3	; 0x03
    4160:	aa 81       	ldd	r26, Y+2	; 0x02
    4162:	b9 81       	ldd	r27, Y+1	; 0x01
    4164:	ce 0f       	add	r28, r30
    4166:	d1 1d       	adc	r29, r1
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	f8 94       	cli
    416c:	de bf       	out	0x3e, r29	; 62
    416e:	0f be       	out	0x3f, r0	; 63
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	ed 01       	movw	r28, r26
    4174:	08 95       	ret

00004176 <_exit>:
    4176:	f8 94       	cli

00004178 <__stop_program>:
    4178:	ff cf       	rjmp	.-2      	; 0x4178 <__stop_program>
